/**
 * generated by Xtext 2.32.0
 */
package org.xtext.iec62443.baseModel.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.iec62443.baseModel.mIEC.Model;

@ExtendWith(InjectionExtension.class)
@InjectWith(MiecInjectorProvider.class)
@SuppressWarnings("all")
public class MiecParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;

  @Test
  public void EmptyModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\t\t\t");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void OneZone() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void OneConduitOneZone() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("Conduit testcnd {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void AppDef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on nothing ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void DevDef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device appTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void SystemDef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("system sysTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [SL4,SL4,SL4,SL4,SL4,SL4,SL4];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("devices{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("(\t");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("device appTest ;");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void appOnDevice() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void appCommunicate() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("communicates with {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void appCommunicateOnConduit() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("communicates with {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTestConduit");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Conduit condTest {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTestConduit ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void appCommunicateThroughConduit() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("communicates with {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest2");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Conduit condTest {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test, test2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTestConduit ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Zone test2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest2 ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void conduitsLinksTwoZones() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Conduit condTest {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test, test2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Zone test2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testChannelDef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Conduit condTest {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test, test2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTestConduit ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("channels{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("( deviceChannel;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("connects{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest2,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTestConduit");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Zone test2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest2 ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testCountermeasureDef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL0 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("countermeasures{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cntTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL1 , SL0 , SL0 , SL0 , SL0, SL0 , SL0 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testSubZone() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("subzones{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Zone testSub {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testSubConduit() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("subzones{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Conduit testSub {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("connects (test);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testPropertyInt() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("intProp = 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testPropertyBool() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("boolProp = false");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testPropertyString() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testPropertyFloat() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("floatProp = 0.5");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testpresenceConstraint() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("needs stringProp");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testOptionalConstraint() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("optional needs stringProp2");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testSelfConstraint() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = self \"stringProp\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testDeviceConstraint() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\",");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp2 = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = ref \"stringProp2\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testImmediateConstraint() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testComparisonsInteger() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("IntProp = 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("IntProp = 0,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("IntProp != 5,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("IntProp <= 0,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("IntProp >= -5,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("IntProp < 5,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("IntProp > -5");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testComparisonsFloat() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("FloatProp = 0.5");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("FloatProp = 0.5,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("FloatProp != 5.5,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("FloatProp <= 0.5,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("FloatProp >= -5.5,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("FloatProp < 5.5,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("FloatProp > -5.5");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testComparisonsBoolean() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("BoolProp = false");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("BoolProp = false,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("BoolProp != true,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("BoolProp <= false,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("BoolProp >= false,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("BoolProp < true,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("optional BoolProp > false");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testComparisonsString() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("StringProp = \"test\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("StringProp = \"test\",");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("StringProp != \"test2\",");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("StringProp <= \"zest\",");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("StringProp >= \"best\",");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("StringProp < \"vest\",");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("StringProp > \"rest\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void test() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\t\t");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
