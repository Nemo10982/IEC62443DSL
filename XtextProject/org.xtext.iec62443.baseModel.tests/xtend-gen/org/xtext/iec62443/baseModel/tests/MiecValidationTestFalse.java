/**
 * generated by Xtext 2.32.0
 */
package org.xtext.iec62443.baseModel.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.Model;

@ExtendWith(InjectionExtension.class)
@InjectWith(MiecInjectorProvider.class)
@SuppressWarnings("all")
public class MiecValidationTestFalse {
  @Inject
  private ParseHelper<Model> parseHelper;

  @Inject
  private ValidationTestHelper testHelper;

  @Test
  public void testDuplicateComponent() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.COMPONENT, "", "duplicate name");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testDuplicateZone() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("Conduit test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.ZONE, "", "duplicate name");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testDuplicateCounter() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL0 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("countermeasures{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cntTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL1 , SL0 , SL0 , SL0 , SL0, SL0 , SL0 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("cntTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL1 , SL0 , SL0 , SL0 , SL0, SL0 , SL0 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.COUNTER_MEASURE, "", "duplicate name");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testDuplicateChannel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Conduit condTest {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test, test2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTestConduit ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("channels{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("( deviceChannel;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("connects{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest2,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTestConduit");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("( deviceChannel;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("connects{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest2,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTestConduit");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Zone test2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest2 ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.CHANNEL, "", "duplicate name");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testDuplicateProperty() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("intProp = 0,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("intProp = 2");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.PROPERTY, "", "duplicate name");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testMultipleMentionZone() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("Conduit testcnd {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test, test);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.CONDUIT, "", "connected multiple times");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testMultipleMentionComponent() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Conduit condTest {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test, test2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTestConduit ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("channels{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("( deviceChannel;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("connects{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTestConduit");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Zone test2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest2 ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.CHANNEL, "", "connected multiple times");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testSubZoneSlevel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("subzones{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Zone testSub {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL0]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.ZONE, "", "lower target SL");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testConnectsItself() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("Conduit testcnd {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test, testcnd);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1]");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.CONDUIT, "", "connects to itself");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testChannelConnectsInZone() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Conduit condTest {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTestConduit ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("channels{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("( deviceChannel;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("connects{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest2,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTestConduit");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Zone test2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest2 ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.CHANNEL, "", "a component that is not in the zone");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testApplicationRanLocally() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest2;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Conduit condTest {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("connects (test, test2);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTestConduit ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("channels{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("( deviceChannel;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("connects{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest2,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTestConduit");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Zone test2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest2 ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.APPLICATION, "", "which is not in the same zone");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testWarningNotExecuted() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on nothing;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertWarning(result, MIECPackage.Literals.APPLICATION, "", "is not executed");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testImpossibleTarget() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL0 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.ZONE, "", "not compatible with component");
      this.testHelper.assertError(result, MIECPackage.Literals.ZONE, "", "can\'t be achieved");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testErrorPropertyNotPresent() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp2 = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = ref \"stringProp2\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.CONSTRAINT, "", "is not present in device");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testErrorPropertyNotPresentRef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = ref \"stringProp2\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.CONSTRAINT, "", "is not present in device");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testErrorPropertyNotPresentSelfRef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\",");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp2 = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = self \"stringProp\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.CONSTRAINT, "", "is not present in the application");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testErrorPropertyIncorrectType() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.CONSTRAINT, "", "does not have the correct type");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testErrorPropertyNotValid() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str2\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.CONSTRAINT, "", "is not verified in");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testWarningPropertyNotPresent() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp2 = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("optional stringProp = ref \"stringProp2\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertWarning(result, MIECPackage.Literals.CONSTRAINT, "", "is not present in device");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testWarningPropertyNotPresentRef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("optional stringProp = ref \"stringProp2\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertWarning(result, MIECPackage.Literals.CONSTRAINT, "", "is not present in device");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testWarningPropertyNotPresentSelfRef() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\",");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp2 = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("optional stringProp = self \"stringProp\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertWarning(result, MIECPackage.Literals.CONSTRAINT, "", "is not present in the application");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testWarningPropertyIncorrectType() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = 0");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("optional stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertWarning(result, MIECPackage.Literals.CONSTRAINT, "", "does not have the correct type");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testWarningPropertyNotValid() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("properties{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("stringProp = \"str\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("constraints{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("optional stringProp = \"str2\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertWarning(result, MIECPackage.Literals.CONSTRAINT, "", "is not verified in");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testAccess() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Zone test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("application appTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("executed on devTest;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ];");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("communicates with {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("devTest2");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Zone test2 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("target [SL1,SL1,SL1,SL1,SL1,SL1,SL1];");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("components {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("device devTest2 ;");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("capability [ SL4 , SL4 , SL4 , SL4 , SL4 , SL4 , SL4 ]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.testHelper.assertError(result, MIECPackage.Literals.APPLICATION, "", "can\'t access the component");
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
