/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.xtext.iec62443.baseModel.mIEC.Application;
import org.xtext.iec62443.baseModel.mIEC.BooleanExpression;
import org.xtext.iec62443.baseModel.mIEC.Device;
import org.xtext.iec62443.baseModel.mIEC.Expression;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.NumberExpression;
import org.xtext.iec62443.baseModel.mIEC.TernaryOp;
import org.xtext.iec62443.baseModel.mIEC.NumberExpression.ComputationErrorException;
import org.xtext.iec62443.baseModel.mIEC.StringExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ternary Op</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.TernaryOpImpl#getOp1 <em>Op1</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.TernaryOpImpl#getOp2 <em>Op2</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.TernaryOpImpl#getOp3 <em>Op3</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TernaryOpImpl extends BooleanExpressionImpl implements TernaryOp {
	/**
	 * The cached value of the '{@link #getOp1() <em>Op1</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOp1()
	 * @generated
	 * @ordered
	 */
	protected Expression op1;

	/**
	 * The cached value of the '{@link #getOp2() <em>Op2</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOp2()
	 * @generated
	 * @ordered
	 */
	protected Expression op2;

	/**
	 * The cached value of the '{@link #getOp3() <em>Op3</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOp3()
	 * @generated
	 * @ordered
	 */
	protected Expression op3;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TernaryOpImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MIECPackage.Literals.TERNARY_OP;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Expression getOp1() {
		return op1;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetOp1(Expression newOp1, NotificationChain msgs) {
		Expression oldOp1 = op1;
		op1 = newOp1;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MIECPackage.TERNARY_OP__OP1, oldOp1, newOp1);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setOp1(Expression newOp1) {
		if (newOp1 != op1) {
			NotificationChain msgs = null;
			if (op1 != null)
				msgs = ((InternalEObject)op1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MIECPackage.TERNARY_OP__OP1, null, msgs);
			if (newOp1 != null)
				msgs = ((InternalEObject)newOp1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MIECPackage.TERNARY_OP__OP1, null, msgs);
			msgs = basicSetOp1(newOp1, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.TERNARY_OP__OP1, newOp1, newOp1));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Expression getOp2() {
		return op2;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetOp2(Expression newOp2, NotificationChain msgs) {
		Expression oldOp2 = op2;
		op2 = newOp2;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MIECPackage.TERNARY_OP__OP2, oldOp2, newOp2);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setOp2(Expression newOp2) {
		if (newOp2 != op2) {
			NotificationChain msgs = null;
			if (op2 != null)
				msgs = ((InternalEObject)op2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MIECPackage.TERNARY_OP__OP2, null, msgs);
			if (newOp2 != null)
				msgs = ((InternalEObject)newOp2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MIECPackage.TERNARY_OP__OP2, null, msgs);
			msgs = basicSetOp2(newOp2, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.TERNARY_OP__OP2, newOp2, newOp2));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Expression getOp3() {
		return op3;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetOp3(Expression newOp3, NotificationChain msgs) {
		Expression oldOp3 = op3;
		op3 = newOp3;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MIECPackage.TERNARY_OP__OP3, oldOp3, newOp3);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setOp3(Expression newOp3) {
		if (newOp3 != op3) {
			NotificationChain msgs = null;
			if (op3 != null)
				msgs = ((InternalEObject)op3).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MIECPackage.TERNARY_OP__OP3, null, msgs);
			if (newOp3 != null)
				msgs = ((InternalEObject)newOp3).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MIECPackage.TERNARY_OP__OP3, null, msgs);
			msgs = basicSetOp3(newOp3, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.TERNARY_OP__OP3, newOp3, newOp3));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int getType() {
		// TODO: implement this method
		// Ensure that you remove @generated or mark it @generated NOT
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.TERNARY_OP__OP1:
				return basicSetOp1(null, msgs);
			case MIECPackage.TERNARY_OP__OP2:
				return basicSetOp2(null, msgs);
			case MIECPackage.TERNARY_OP__OP3:
				return basicSetOp3(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MIECPackage.TERNARY_OP__OP1:
				return getOp1();
			case MIECPackage.TERNARY_OP__OP2:
				return getOp2();
			case MIECPackage.TERNARY_OP__OP3:
				return getOp3();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MIECPackage.TERNARY_OP__OP1:
				setOp1((Expression)newValue);
				return;
			case MIECPackage.TERNARY_OP__OP2:
				setOp2((Expression)newValue);
				return;
			case MIECPackage.TERNARY_OP__OP3:
				setOp3((Expression)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MIECPackage.TERNARY_OP__OP1:
				setOp1((Expression)null);
				return;
			case MIECPackage.TERNARY_OP__OP2:
				setOp2((Expression)null);
				return;
			case MIECPackage.TERNARY_OP__OP3:
				setOp3((Expression)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MIECPackage.TERNARY_OP__OP1:
				return op1 != null;
			case MIECPackage.TERNARY_OP__OP2:
				return op2 != null;
			case MIECPackage.TERNARY_OP__OP3:
				return op3 != null;
		}
		return super.eIsSet(featureID);
	}
	

	@Override
	public float computeValue(Application application, Device device) throws ComputationErrorException {
		if (!(this.op1 instanceof BooleanExpression)) {
			throw new ComputationErrorException("Problem computing a ternary operation: the condition is not boolean");
		}
		if (!(this.op2 instanceof NumberExpression)) {
			throw new ComputationErrorException("Problem computing a ternary operation: the operand 2 is not a number");
		}
		if (!(this.op3 instanceof NumberExpression)) {
			throw new ComputationErrorException("Problem computing a ternary operation: the operand 3 is not a number");
		}
		
		if (((BooleanExpression) op1).getBooleanRes(application,device)) {
			return ((NumberExpression) this.op2).computeValue(application, device);
		}
		else{
			return ((NumberExpression) this.op3).computeValue(application, device);
		}
	}

	@Override
	public boolean getBooleanRes(Application application, Device device) throws ComputationErrorException {
		if (!(this.op1 instanceof BooleanExpression)) {
			throw new ComputationErrorException("Problem computing a ternary operation: the condition is not boolean");
		}
		if (!(this.op2 instanceof BooleanExpression)) {
			throw new ComputationErrorException("Problem computing a ternary operation: the operand 2 is not a boolean");
		}
		if (!(this.op3 instanceof BooleanExpression)) {
			throw new ComputationErrorException("Problem computing a ternary operation: the operand 3 is not a boolean");
		}
		
		if (((BooleanExpression) op1).getBooleanRes(application,device)) {
			return ((BooleanExpression) this.op2).getBooleanRes(application, device);
		}
		else{
			return ((BooleanExpression) this.op3).getBooleanRes(application, device);
		}
	}

	@Override
	public String computeString(Application application, Device device) throws ComputationErrorException {
		if (!(this.op1 instanceof BooleanExpression)) {
			throw new ComputationErrorException("Problem computing a ternary operation: the condition is not boolean");
		}
		if (!(this.op2 instanceof StringExpression)) {
			throw new ComputationErrorException("Problem computing a ternary operation: the operand 2 is not a boolean");
		}
		if (!(this.op3 instanceof StringExpression)) {
			throw new ComputationErrorException("Problem computing a ternary operation: the operand 3 is not a boolean");
		}
		
		if (((BooleanExpression) op1).getBooleanRes(application,device)) {
			return ((StringExpression) this.op2).computeString(application, device);
		}
		else{
			return ((StringExpression) this.op3).computeString(application, device);
		}
	}

	@Override
	public String ExpressiontoString() {
		return "(" + op1.ExpressiontoString() + " ? " + op2.ExpressiontoString() + " : " + op3.ExpressiontoString() + ")";
 	}
	
	
	
} //TernaryOpImpl
