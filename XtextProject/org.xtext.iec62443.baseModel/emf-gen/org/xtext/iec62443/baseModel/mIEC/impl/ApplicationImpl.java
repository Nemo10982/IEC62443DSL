/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.xtext.iec62443.baseModel.mIEC.Application;
import org.xtext.iec62443.baseModel.mIEC.Component;
import org.xtext.iec62443.baseModel.mIEC.Constraint;
import org.xtext.iec62443.baseModel.mIEC.Device;
import org.xtext.iec62443.baseModel.mIEC.IntegerValue;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.NumberExpression;
import org.xtext.iec62443.baseModel.mIEC.NumberExpression.ComputationErrorException;
import org.xtext.iec62443.baseModel.mIEC.Property;
import org.xtext.iec62443.baseModel.mIEC.SecurityLevels;
import org.xtext.iec62443.baseModel.mIEC.Zone;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Application</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ApplicationImpl#getConstraints <em>Constraints</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ApplicationImpl#getExecutedOn <em>Executed On</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ApplicationImpl#getCommunicatesWith <em>Communicates With</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ApplicationImpl#getScoreExpr <em>Score Expr</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ApplicationImpl#getSLevelConstraint <em>SLevel Constraint</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ApplicationImpl extends ComponentImpl implements Application {
	/**
	 * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getConstraints()
	 * @generated
	 * @ordered
	 */
	protected EList<Constraint> constraints;
	/**
	 * The cached value of the '{@link #getExecutedOn() <em>Executed On</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExecutedOn()
	 * @generated
	 * @ordered
	 */
	protected Device executedOn;

	/**
	 * The cached value of the '{@link #getCommunicatesWith() <em>Communicates With</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCommunicatesWith()
	 * @generated
	 * @ordered
	 */
	protected EList<Component> communicatesWith;

	/**
	 * The cached value of the '{@link #getScoreExpr() <em>Score Expr</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getScoreExpr()
	 * @generated
	 * @ordered
	 */
	protected NumberExpression scoreExpr;

	/**
	 * The cached value of the '{@link #getSLevelConstraint() <em>SLevel Constraint</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSLevelConstraint()
	 * @generated
	 * @ordered
	 */
	protected SecurityLevels sLevelConstraint;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MIECPackage.Literals.APPLICATION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Constraint> getConstraints() {
		if (constraints == null) {
			constraints = new EObjectContainmentEList<Constraint>(Constraint.class, this, MIECPackage.APPLICATION__CONSTRAINTS);
		}
		return constraints;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Device getExecutedOn() {
		return executedOn;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetExecutedOn(Device newExecutedOn, NotificationChain msgs) {
		Device oldExecutedOn = executedOn;
		executedOn = newExecutedOn;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MIECPackage.APPLICATION__EXECUTED_ON, oldExecutedOn, newExecutedOn);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setExecutedOn(Device newExecutedOn) {
		if (newExecutedOn != executedOn) {
			NotificationChain msgs = null;
			if (executedOn != null)
				msgs = ((InternalEObject)executedOn).eInverseRemove(this, MIECPackage.DEVICE__RUNNING, Device.class, msgs);
			if (newExecutedOn != null)
				msgs = ((InternalEObject)newExecutedOn).eInverseAdd(this, MIECPackage.DEVICE__RUNNING, Device.class, msgs);
			msgs = basicSetExecutedOn(newExecutedOn, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.APPLICATION__EXECUTED_ON, newExecutedOn, newExecutedOn));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Component> getCommunicatesWith() {
		if (communicatesWith == null) {
			communicatesWith = new EObjectResolvingEList<Component>(Component.class, this, MIECPackage.APPLICATION__COMMUNICATES_WITH);
		}
		return communicatesWith;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NumberExpression getScoreExpr() {
		return scoreExpr;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetScoreExpr(NumberExpression newScoreExpr, NotificationChain msgs) {
		NumberExpression oldScoreExpr = scoreExpr;
		scoreExpr = newScoreExpr;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MIECPackage.APPLICATION__SCORE_EXPR, oldScoreExpr, newScoreExpr);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setScoreExpr(NumberExpression newScoreExpr) {
		if (newScoreExpr != scoreExpr) {
			NotificationChain msgs = null;
			if (scoreExpr != null)
				msgs = ((InternalEObject)scoreExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MIECPackage.APPLICATION__SCORE_EXPR, null, msgs);
			if (newScoreExpr != null)
				msgs = ((InternalEObject)newScoreExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MIECPackage.APPLICATION__SCORE_EXPR, null, msgs);
			msgs = basicSetScoreExpr(newScoreExpr, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.APPLICATION__SCORE_EXPR, newScoreExpr, newScoreExpr));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SecurityLevels getSLevelConstraint() {
		return sLevelConstraint;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetSLevelConstraint(SecurityLevels newSLevelConstraint, NotificationChain msgs) {
		SecurityLevels oldSLevelConstraint = sLevelConstraint;
		sLevelConstraint = newSLevelConstraint;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MIECPackage.APPLICATION__SLEVEL_CONSTRAINT, oldSLevelConstraint, newSLevelConstraint);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setSLevelConstraint(SecurityLevels newSLevelConstraint) {
		if (newSLevelConstraint != sLevelConstraint) {
			NotificationChain msgs = null;
			if (sLevelConstraint != null)
				msgs = ((InternalEObject)sLevelConstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MIECPackage.APPLICATION__SLEVEL_CONSTRAINT, null, msgs);
			if (newSLevelConstraint != null)
				msgs = ((InternalEObject)newSLevelConstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MIECPackage.APPLICATION__SLEVEL_CONSTRAINT, null, msgs);
			msgs = basicSetSLevelConstraint(newSLevelConstraint, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.APPLICATION__SLEVEL_CONSTRAINT, newSLevelConstraint, newSLevelConstraint));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated not
	 */
	@Override
	// Potential new way of defining score
	public int getScore() {
		
		// If not executed, the score is 0
		// If no formula, the score is also 0
		if (this.getExecutedOn() == null || this.getScoreExpr() == null) {
			return 0;
		}
		
		
		else {
			try {
				return (int) this.getScoreExpr().computeValue(this, this.getExecutedOn());
			} catch (ComputationErrorException e) {
				// Error during computation;
				System.out.println("Error");
				return 0;
			}
		}
	}
	

	public int getScoreOnDevice(Device d) {
		
		// If no formula, the score is 0
		if (this.getScoreExpr() == null) {
			return 0;
		}
		// else, compute the whole formula
		
		else {
			try {
				return (int) this.getScoreExpr().computeValue(this, d);
			} catch (ComputationErrorException e) {
				// Error during computation (incompatible with target device: return 0);
				return 0;
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.APPLICATION__EXECUTED_ON:
				if (executedOn != null)
					msgs = ((InternalEObject)executedOn).eInverseRemove(this, MIECPackage.DEVICE__RUNNING, Device.class, msgs);
				return basicSetExecutedOn((Device)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.APPLICATION__CONSTRAINTS:
				return ((InternalEList<?>)getConstraints()).basicRemove(otherEnd, msgs);
			case MIECPackage.APPLICATION__EXECUTED_ON:
				return basicSetExecutedOn(null, msgs);
			case MIECPackage.APPLICATION__SCORE_EXPR:
				return basicSetScoreExpr(null, msgs);
			case MIECPackage.APPLICATION__SLEVEL_CONSTRAINT:
				return basicSetSLevelConstraint(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MIECPackage.APPLICATION__CONSTRAINTS:
				return getConstraints();
			case MIECPackage.APPLICATION__EXECUTED_ON:
				return getExecutedOn();
			case MIECPackage.APPLICATION__COMMUNICATES_WITH:
				return getCommunicatesWith();
			case MIECPackage.APPLICATION__SCORE_EXPR:
				return getScoreExpr();
			case MIECPackage.APPLICATION__SLEVEL_CONSTRAINT:
				return getSLevelConstraint();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MIECPackage.APPLICATION__CONSTRAINTS:
				getConstraints().clear();
				getConstraints().addAll((Collection<? extends Constraint>)newValue);
				return;
			case MIECPackage.APPLICATION__EXECUTED_ON:
				setExecutedOn((Device)newValue);
				return;
			case MIECPackage.APPLICATION__COMMUNICATES_WITH:
				getCommunicatesWith().clear();
				getCommunicatesWith().addAll((Collection<? extends Component>)newValue);
				return;
			case MIECPackage.APPLICATION__SCORE_EXPR:
				setScoreExpr((NumberExpression)newValue);
				return;
			case MIECPackage.APPLICATION__SLEVEL_CONSTRAINT:
				setSLevelConstraint((SecurityLevels)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MIECPackage.APPLICATION__CONSTRAINTS:
				getConstraints().clear();
				return;
			case MIECPackage.APPLICATION__EXECUTED_ON:
				setExecutedOn((Device)null);
				return;
			case MIECPackage.APPLICATION__COMMUNICATES_WITH:
				getCommunicatesWith().clear();
				return;
			case MIECPackage.APPLICATION__SCORE_EXPR:
				setScoreExpr((NumberExpression)null);
				return;
			case MIECPackage.APPLICATION__SLEVEL_CONSTRAINT:
				setSLevelConstraint((SecurityLevels)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MIECPackage.APPLICATION__CONSTRAINTS:
				return constraints != null && !constraints.isEmpty();
			case MIECPackage.APPLICATION__EXECUTED_ON:
				return executedOn != null;
			case MIECPackage.APPLICATION__COMMUNICATES_WITH:
				return communicatesWith != null && !communicatesWith.isEmpty();
			case MIECPackage.APPLICATION__SCORE_EXPR:
				return scoreExpr != null;
			case MIECPackage.APPLICATION__SLEVEL_CONSTRAINT:
				return sLevelConstraint != null;
		}
		return super.eIsSet(featureID);
	}

	@Override
	public int getType() {
		return Component.APPLICATION;
	}
	
	public Zone getZone() {
		return (Zone) this.eContainer();
	}

	@Override
	public int getScore(int state) {
		// Old way of defining score
		if (getProperty("score") == null) {
			return 0;
		}
		switch(state){
			case 0:
				return (((IntegerValue) getProperty("score").getValue()).getValue());
			case 1:
				if (getProperty("score_d") == null) {
					// If we return the original score
					//return  (((IntegerValue) getProperty("score").getValue()).getValue());
					// If we return 0 (more appropriate I suppose ?)
					return 0;
				}
				else {
					 return (((IntegerValue) getProperty("score_d").getValue()).getValue());
				}
			default:
				return 0;
		}
		
	}

	@Override
	public int getSize() {
		if (getProperty("size") == null) {
			return 0;
		}
		return (((IntegerValue) getProperty("size").getValue()).getValue());
	}

} //ApplicationImpl
