/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectWithInverseEList;
import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.xtext.iec62443.baseModel.mIEC.Application;
import org.xtext.iec62443.baseModel.mIEC.Component;
import org.xtext.iec62443.baseModel.mIEC.Device;
import org.xtext.iec62443.baseModel.mIEC.IntegerValue;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.Property;
import org.xtext.iec62443.baseModel.mIEC.Zone;
import org.xtext.iec62443.baseModel.mIEC.System;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Device</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.DeviceImpl#getRunning <em>Running</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.DeviceImpl#isEmbedded <em>Embedded</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.DeviceImpl#isHost <em>Host</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.DeviceImpl#isNetwork <em>Network</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeviceImpl extends ComponentImpl implements Device {
	/**
	 * The cached value of the '{@link #getRunning() <em>Running</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getRunning()
	 * @generated
	 * @ordered
	 */
	protected EList<Application> running;

	/**
	 * The default value of the '{@link #isEmbedded() <em>Embedded</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isEmbedded()
	 * @generated
	 * @ordered
	 */
	protected static final boolean EMBEDDED_EDEFAULT = false;
	/**
	 * The cached value of the '{@link #isEmbedded() <em>Embedded</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isEmbedded()
	 * @generated
	 * @ordered
	 */
	protected boolean embedded = EMBEDDED_EDEFAULT;
	/**
	 * The default value of the '{@link #isHost() <em>Host</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isHost()
	 * @generated
	 * @ordered
	 */
	protected static final boolean HOST_EDEFAULT = false;
	/**
	 * The cached value of the '{@link #isHost() <em>Host</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isHost()
	 * @generated
	 * @ordered
	 */
	protected boolean host = HOST_EDEFAULT;
	/**
	 * The default value of the '{@link #isNetwork() <em>Network</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isNetwork()
	 * @generated
	 * @ordered
	 */
	protected static final boolean NETWORK_EDEFAULT = false;
	/**
	 * The cached value of the '{@link #isNetwork() <em>Network</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isNetwork()
	 * @generated
	 * @ordered
	 */
	protected boolean network = NETWORK_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MIECPackage.Literals.DEVICE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Application> getRunning() {
		if (running == null) {
			running = new EObjectWithInverseEList<Application>(Application.class, this, MIECPackage.DEVICE__RUNNING, MIECPackage.APPLICATION__EXECUTED_ON);
		}
		return running;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isEmbedded() {
		return embedded;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setEmbedded(boolean newEmbedded) {
		boolean oldEmbedded = embedded;
		embedded = newEmbedded;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.DEVICE__EMBEDDED, oldEmbedded, embedded));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isHost() {
		return host;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setHost(boolean newHost) {
		boolean oldHost = host;
		host = newHost;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.DEVICE__HOST, oldHost, host));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isNetwork() {
		return network;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setNetwork(boolean newNetwork) {
		boolean oldNetwork = network;
		network = newNetwork;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.DEVICE__NETWORK, oldNetwork, network));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.DEVICE__RUNNING:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getRunning()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.DEVICE__RUNNING:
				return ((InternalEList<?>)getRunning()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MIECPackage.DEVICE__RUNNING:
				return getRunning();
			case MIECPackage.DEVICE__EMBEDDED:
				return isEmbedded();
			case MIECPackage.DEVICE__HOST:
				return isHost();
			case MIECPackage.DEVICE__NETWORK:
				return isNetwork();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MIECPackage.DEVICE__RUNNING:
				getRunning().clear();
				getRunning().addAll((Collection<? extends Application>)newValue);
				return;
			case MIECPackage.DEVICE__EMBEDDED:
				setEmbedded((Boolean)newValue);
				return;
			case MIECPackage.DEVICE__HOST:
				setHost((Boolean)newValue);
				return;
			case MIECPackage.DEVICE__NETWORK:
				setNetwork((Boolean)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MIECPackage.DEVICE__RUNNING:
				getRunning().clear();
				return;
			case MIECPackage.DEVICE__EMBEDDED:
				setEmbedded(EMBEDDED_EDEFAULT);
				return;
			case MIECPackage.DEVICE__HOST:
				setHost(HOST_EDEFAULT);
				return;
			case MIECPackage.DEVICE__NETWORK:
				setNetwork(NETWORK_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MIECPackage.DEVICE__RUNNING:
				return running != null && !running.isEmpty();
			case MIECPackage.DEVICE__EMBEDDED:
				return embedded != EMBEDDED_EDEFAULT;
			case MIECPackage.DEVICE__HOST:
				return host != HOST_EDEFAULT;
			case MIECPackage.DEVICE__NETWORK:
				return network != NETWORK_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (embedded: ");
		result.append(embedded);
		result.append(", host: ");
		result.append(host);
		result.append(", network: ");
		result.append(network);
		result.append(')');
		return result.toString();
	}

	@Override
	public int getType() {
		return Component.DEVICE;
	}
	
	public Zone getZone() {
		EObject container = this.eContainer();
		if (container instanceof Zone) {
			return (Zone) container;
		}
		else {
			return ((System) container).getZone();
		}
	}

	@Override
	public int getCapacity() {
		if (getProperty("capacity") == null) {
			return -1;
		}
		return (((IntegerValue) getProperty("capacity").getValue()).getValue());
	}

} //DeviceImpl
