/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC.impl;

import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.xtext.EcoreUtil2;
import org.xtext.iec62443.baseModel.mIEC.ClassicalZone;
import org.xtext.iec62443.baseModel.mIEC.Component;
import org.xtext.iec62443.baseModel.mIEC.Conduit;
import org.xtext.iec62443.baseModel.mIEC.Device;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.Model;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ModelImpl#getZones <em>Zones</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ModelImpl#getConduits <em>Conduits</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ModelImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ModelImpl#getFunction <em>Function</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ModelImpl#getEquipmentDescription <em>Equipment Description</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ModelImpl#getAssumptionsOnLocation <em>Assumptions On Location</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model {
	/**
	 * The cached value of the '{@link #getZones() <em>Zones</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getZones()
	 * @generated
	 * @ordered
	 */
	protected EList<ClassicalZone> zones;

	/**
	 * The cached value of the '{@link #getConduits() <em>Conduits</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getConduits()
	 * @generated
	 * @ordered
	 */
	protected EList<Conduit> conduits;

	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The default value of the '{@link #getFunction() <em>Function</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFunction()
	 * @generated
	 * @ordered
	 */
	protected static final String FUNCTION_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getFunction() <em>Function</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFunction()
	 * @generated
	 * @ordered
	 */
	protected String function = FUNCTION_EDEFAULT;

	/**
	 * The default value of the '{@link #getEquipmentDescription() <em>Equipment Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEquipmentDescription()
	 * @generated
	 * @ordered
	 */
	protected static final String EQUIPMENT_DESCRIPTION_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getEquipmentDescription() <em>Equipment Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEquipmentDescription()
	 * @generated
	 * @ordered
	 */
	protected String equipmentDescription = EQUIPMENT_DESCRIPTION_EDEFAULT;

	/**
	 * The default value of the '{@link #getAssumptionsOnLocation() <em>Assumptions On Location</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAssumptionsOnLocation()
	 * @generated
	 * @ordered
	 */
	protected static final String ASSUMPTIONS_ON_LOCATION_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getAssumptionsOnLocation() <em>Assumptions On Location</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAssumptionsOnLocation()
	 * @generated
	 * @ordered
	 */
	protected String assumptionsOnLocation = ASSUMPTIONS_ON_LOCATION_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MIECPackage.Literals.MODEL;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<ClassicalZone> getZones() {
		if (zones == null) {
			zones = new EObjectContainmentEList<ClassicalZone>(ClassicalZone.class, this, MIECPackage.MODEL__ZONES);
		}
		return zones;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Conduit> getConduits() {
		if (conduits == null) {
			conduits = new EObjectContainmentEList<Conduit>(Conduit.class, this, MIECPackage.MODEL__CONDUITS);
		}
		return conduits;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.MODEL__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getFunction() {
		return function;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setFunction(String newFunction) {
		String oldFunction = function;
		function = newFunction;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.MODEL__FUNCTION, oldFunction, function));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getEquipmentDescription() {
		return equipmentDescription;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setEquipmentDescription(String newEquipmentDescription) {
		String oldEquipmentDescription = equipmentDescription;
		equipmentDescription = newEquipmentDescription;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.MODEL__EQUIPMENT_DESCRIPTION, oldEquipmentDescription, equipmentDescription));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getAssumptionsOnLocation() {
		return assumptionsOnLocation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setAssumptionsOnLocation(String newAssumptionsOnLocation) {
		String oldAssumptionsOnLocation = assumptionsOnLocation;
		assumptionsOnLocation = newAssumptionsOnLocation;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.MODEL__ASSUMPTIONS_ON_LOCATION, oldAssumptionsOnLocation, assumptionsOnLocation));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.MODEL__ZONES:
				return ((InternalEList<?>)getZones()).basicRemove(otherEnd, msgs);
			case MIECPackage.MODEL__CONDUITS:
				return ((InternalEList<?>)getConduits()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MIECPackage.MODEL__ZONES:
				return getZones();
			case MIECPackage.MODEL__CONDUITS:
				return getConduits();
			case MIECPackage.MODEL__NAME:
				return getName();
			case MIECPackage.MODEL__FUNCTION:
				return getFunction();
			case MIECPackage.MODEL__EQUIPMENT_DESCRIPTION:
				return getEquipmentDescription();
			case MIECPackage.MODEL__ASSUMPTIONS_ON_LOCATION:
				return getAssumptionsOnLocation();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MIECPackage.MODEL__ZONES:
				getZones().clear();
				getZones().addAll((Collection<? extends ClassicalZone>)newValue);
				return;
			case MIECPackage.MODEL__CONDUITS:
				getConduits().clear();
				getConduits().addAll((Collection<? extends Conduit>)newValue);
				return;
			case MIECPackage.MODEL__NAME:
				setName((String)newValue);
				return;
			case MIECPackage.MODEL__FUNCTION:
				setFunction((String)newValue);
				return;
			case MIECPackage.MODEL__EQUIPMENT_DESCRIPTION:
				setEquipmentDescription((String)newValue);
				return;
			case MIECPackage.MODEL__ASSUMPTIONS_ON_LOCATION:
				setAssumptionsOnLocation((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MIECPackage.MODEL__ZONES:
				getZones().clear();
				return;
			case MIECPackage.MODEL__CONDUITS:
				getConduits().clear();
				return;
			case MIECPackage.MODEL__NAME:
				setName(NAME_EDEFAULT);
				return;
			case MIECPackage.MODEL__FUNCTION:
				setFunction(FUNCTION_EDEFAULT);
				return;
			case MIECPackage.MODEL__EQUIPMENT_DESCRIPTION:
				setEquipmentDescription(EQUIPMENT_DESCRIPTION_EDEFAULT);
				return;
			case MIECPackage.MODEL__ASSUMPTIONS_ON_LOCATION:
				setAssumptionsOnLocation(ASSUMPTIONS_ON_LOCATION_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MIECPackage.MODEL__ZONES:
				return zones != null && !zones.isEmpty();
			case MIECPackage.MODEL__CONDUITS:
				return conduits != null && !conduits.isEmpty();
			case MIECPackage.MODEL__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case MIECPackage.MODEL__FUNCTION:
				return FUNCTION_EDEFAULT == null ? function != null : !FUNCTION_EDEFAULT.equals(function);
			case MIECPackage.MODEL__EQUIPMENT_DESCRIPTION:
				return EQUIPMENT_DESCRIPTION_EDEFAULT == null ? equipmentDescription != null : !EQUIPMENT_DESCRIPTION_EDEFAULT.equals(equipmentDescription);
			case MIECPackage.MODEL__ASSUMPTIONS_ON_LOCATION:
				return ASSUMPTIONS_ON_LOCATION_EDEFAULT == null ? assumptionsOnLocation != null : !ASSUMPTIONS_ON_LOCATION_EDEFAULT.equals(assumptionsOnLocation);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(", function: ");
		result.append(function);
		result.append(", equipmentDescription: ");
		result.append(equipmentDescription);
		result.append(", assumptionsOnLocation: ");
		result.append(assumptionsOnLocation);
		result.append(')');
		return result.toString();
	}

	@Override
	public void reconfigureWithout(Component c) {
		Model m2 = org.xtext.iec62443.baseModel.transformation.Reconfiguration.reconfigureWithout(c, this);
		this.getConduits().clear();
		this.getConduits().addAll(m2.getConduits());
		this.getZones().clear();
		this.getZones().addAll(m2.getZones());
		System.out.println("aaa");
		
		
	}

	@Override
	public Device getDevice(String name) {
		List<Device> devices = EcoreUtil2.getAllContentsOfType(this, Device.class);
		for (Device d: devices) {
			if (d.getName().equals(name)) {
				return d;
			}
		}
		return null;
	}

} //ModelImpl
