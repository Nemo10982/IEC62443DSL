/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.util.InternalEList;
import org.xtext.iec62443.baseModel.mIEC.ClassicalZone;
import org.xtext.iec62443.baseModel.mIEC.Component;
import org.xtext.iec62443.baseModel.mIEC.CounterMeasure;
import org.xtext.iec62443.baseModel.mIEC.MIECFactory;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.SecurityLevel;
import org.xtext.iec62443.baseModel.mIEC.SecurityLevels;
import org.xtext.iec62443.baseModel.mIEC.Zone;
import org.xtext.iec62443.baseModel.mIEC.ZoneCharacteristics;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Zone</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneImpl#getComponents <em>Components</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneImpl#isTrusted <em>Trusted</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneImpl#getCountermeasures <em>Countermeasures</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneImpl#isPhysical <em>Physical</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneImpl#getIsSubZoneOf <em>Is Sub Zone Of</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneImpl#getFurtherDesc <em>Further Desc</em>}</li>
 * </ul>
 *
 * @generated
 */
public abstract class ZoneImpl extends MinimalEObjectImpl.Container implements Zone {
	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The cached value of the '{@link #getTarget() <em>Target</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTarget()
	 * @generated
	 * @ordered
	 */
	protected SecurityLevels target;

	/**
	 * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getComponents()
	 * @generated
	 * @ordered
	 */
	protected EList<Component> components;

	/**
	 * The default value of the '{@link #isTrusted() <em>Trusted</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isTrusted()
	 * @generated
	 * @ordered
	 */
	protected static final boolean TRUSTED_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isTrusted() <em>Trusted</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isTrusted()
	 * @generated
	 * @ordered
	 */
	protected boolean trusted = TRUSTED_EDEFAULT;

	/**
	 * The cached value of the '{@link #getCountermeasures() <em>Countermeasures</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCountermeasures()
	 * @generated
	 * @ordered
	 */
	protected EList<CounterMeasure> countermeasures;

	/**
	 * The default value of the '{@link #isPhysical() <em>Physical</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isPhysical()
	 * @generated
	 * @ordered
	 */
	protected static final boolean PHYSICAL_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isPhysical() <em>Physical</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isPhysical()
	 * @generated
	 * @ordered
	 */
	protected boolean physical = PHYSICAL_EDEFAULT;

	/**
	 * The cached value of the '{@link #getFurtherDesc() <em>Further Desc</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFurtherDesc()
	 * @generated
	 * @ordered
	 */
	protected ZoneCharacteristics furtherDesc;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ZoneImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MIECPackage.Literals.ZONE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.ZONE__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SecurityLevels getTarget() {
		return target;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetTarget(SecurityLevels newTarget, NotificationChain msgs) {
		SecurityLevels oldTarget = target;
		target = newTarget;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MIECPackage.ZONE__TARGET, oldTarget, newTarget);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setTarget(SecurityLevels newTarget) {
		if (newTarget != target) {
			NotificationChain msgs = null;
			if (target != null)
				msgs = ((InternalEObject)target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MIECPackage.ZONE__TARGET, null, msgs);
			if (newTarget != null)
				msgs = ((InternalEObject)newTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MIECPackage.ZONE__TARGET, null, msgs);
			msgs = basicSetTarget(newTarget, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.ZONE__TARGET, newTarget, newTarget));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	@Override
	public SecurityLevels getAchieved() {
		SecurityLevels res = MIECFactoryImpl.eINSTANCE.createSecurityLevels();
		for (int i = 0; i < 7; i++) {
			res.setSecurityLevel(i, SecurityLevel.SL4);
		}
		for (Component c: this.getComponents()) {
			for (int i = 0; i <7; i++) {
				//Skip Not Relevant values
				if (c.getCapability().getSecurityLevel(i).getValue() == SecurityLevel.NR_VALUE) continue;
				
				res.setSecurityLevel(i, SecurityLevel.get(Math.min(res.getSecurityLevel(i).getValue(), c.getCapability().getSecurityLevel(i).getValue())));
			}
		}
		for (CounterMeasure c: this.getCountermeasures()) {
			for (int i = 0; i <7; i++) {
				
				//Skip Not Relevant values
				if (c.getCapability().getSecurityLevel(i).getValue() == SecurityLevel.NR_VALUE) continue;
				
				res.setSecurityLevel(i, SecurityLevel.get(Math.max(res.getSecurityLevel(i).getValue(), c.getCapability().getSecurityLevel(i).getValue())));
			}
		}
		return res;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Component> getComponents() {
		if (components == null) {
			components = new EObjectContainmentEList<Component>(Component.class, this, MIECPackage.ZONE__COMPONENTS);
		}
		return components;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isTrusted() {
		return trusted;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setTrusted(boolean newTrusted) {
		boolean oldTrusted = trusted;
		trusted = newTrusted;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.ZONE__TRUSTED, oldTrusted, trusted));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.ZONE__IS_SUB_ZONE_OF:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetIsSubZoneOf((ClassicalZone)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<CounterMeasure> getCountermeasures() {
		if (countermeasures == null) {
			countermeasures = new EObjectContainmentEList<CounterMeasure>(CounterMeasure.class, this, MIECPackage.ZONE__COUNTERMEASURES);
		}
		return countermeasures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isPhysical() {
		return physical;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setPhysical(boolean newPhysical) {
		boolean oldPhysical = physical;
		physical = newPhysical;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.ZONE__PHYSICAL, oldPhysical, physical));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ClassicalZone getIsSubZoneOf() {
		if (eContainerFeatureID() != MIECPackage.ZONE__IS_SUB_ZONE_OF) return null;
		return (ClassicalZone)eInternalContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetIsSubZoneOf(ClassicalZone newIsSubZoneOf, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newIsSubZoneOf, MIECPackage.ZONE__IS_SUB_ZONE_OF, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setIsSubZoneOf(ClassicalZone newIsSubZoneOf) {
		if (newIsSubZoneOf != eInternalContainer() || (eContainerFeatureID() != MIECPackage.ZONE__IS_SUB_ZONE_OF && newIsSubZoneOf != null)) {
			if (EcoreUtil.isAncestor(this, newIsSubZoneOf))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newIsSubZoneOf != null)
				msgs = ((InternalEObject)newIsSubZoneOf).eInverseAdd(this, MIECPackage.CLASSICAL_ZONE__SUB_ZONES, ClassicalZone.class, msgs);
			msgs = basicSetIsSubZoneOf(newIsSubZoneOf, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.ZONE__IS_SUB_ZONE_OF, newIsSubZoneOf, newIsSubZoneOf));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ZoneCharacteristics getFurtherDesc() {
		return furtherDesc;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetFurtherDesc(ZoneCharacteristics newFurtherDesc, NotificationChain msgs) {
		ZoneCharacteristics oldFurtherDesc = furtherDesc;
		furtherDesc = newFurtherDesc;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MIECPackage.ZONE__FURTHER_DESC, oldFurtherDesc, newFurtherDesc);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setFurtherDesc(ZoneCharacteristics newFurtherDesc) {
		if (newFurtherDesc != furtherDesc) {
			NotificationChain msgs = null;
			if (furtherDesc != null)
				msgs = ((InternalEObject)furtherDesc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MIECPackage.ZONE__FURTHER_DESC, null, msgs);
			if (newFurtherDesc != null)
				msgs = ((InternalEObject)newFurtherDesc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MIECPackage.ZONE__FURTHER_DESC, null, msgs);
			msgs = basicSetFurtherDesc(newFurtherDesc, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.ZONE__FURTHER_DESC, newFurtherDesc, newFurtherDesc));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.ZONE__TARGET:
				return basicSetTarget(null, msgs);
			case MIECPackage.ZONE__COMPONENTS:
				return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
			case MIECPackage.ZONE__COUNTERMEASURES:
				return ((InternalEList<?>)getCountermeasures()).basicRemove(otherEnd, msgs);
			case MIECPackage.ZONE__IS_SUB_ZONE_OF:
				return basicSetIsSubZoneOf(null, msgs);
			case MIECPackage.ZONE__FURTHER_DESC:
				return basicSetFurtherDesc(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID()) {
			case MIECPackage.ZONE__IS_SUB_ZONE_OF:
				return eInternalContainer().eInverseRemove(this, MIECPackage.CLASSICAL_ZONE__SUB_ZONES, ClassicalZone.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MIECPackage.ZONE__NAME:
				return getName();
			case MIECPackage.ZONE__TARGET:
				return getTarget();
			case MIECPackage.ZONE__COMPONENTS:
				return getComponents();
			case MIECPackage.ZONE__TRUSTED:
				return isTrusted();
			case MIECPackage.ZONE__COUNTERMEASURES:
				return getCountermeasures();
			case MIECPackage.ZONE__PHYSICAL:
				return isPhysical();
			case MIECPackage.ZONE__IS_SUB_ZONE_OF:
				return getIsSubZoneOf();
			case MIECPackage.ZONE__FURTHER_DESC:
				return getFurtherDesc();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MIECPackage.ZONE__NAME:
				setName((String)newValue);
				return;
			case MIECPackage.ZONE__TARGET:
				setTarget((SecurityLevels)newValue);
				return;
			case MIECPackage.ZONE__COMPONENTS:
				getComponents().clear();
				getComponents().addAll((Collection<? extends Component>)newValue);
				return;
			case MIECPackage.ZONE__TRUSTED:
				setTrusted((Boolean)newValue);
				return;
			case MIECPackage.ZONE__COUNTERMEASURES:
				getCountermeasures().clear();
				getCountermeasures().addAll((Collection<? extends CounterMeasure>)newValue);
				return;
			case MIECPackage.ZONE__PHYSICAL:
				setPhysical((Boolean)newValue);
				return;
			case MIECPackage.ZONE__IS_SUB_ZONE_OF:
				setIsSubZoneOf((ClassicalZone)newValue);
				return;
			case MIECPackage.ZONE__FURTHER_DESC:
				setFurtherDesc((ZoneCharacteristics)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MIECPackage.ZONE__NAME:
				setName(NAME_EDEFAULT);
				return;
			case MIECPackage.ZONE__TARGET:
				setTarget((SecurityLevels)null);
				return;
			case MIECPackage.ZONE__COMPONENTS:
				getComponents().clear();
				return;
			case MIECPackage.ZONE__TRUSTED:
				setTrusted(TRUSTED_EDEFAULT);
				return;
			case MIECPackage.ZONE__COUNTERMEASURES:
				getCountermeasures().clear();
				return;
			case MIECPackage.ZONE__PHYSICAL:
				setPhysical(PHYSICAL_EDEFAULT);
				return;
			case MIECPackage.ZONE__IS_SUB_ZONE_OF:
				setIsSubZoneOf((ClassicalZone)null);
				return;
			case MIECPackage.ZONE__FURTHER_DESC:
				setFurtherDesc((ZoneCharacteristics)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MIECPackage.ZONE__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case MIECPackage.ZONE__TARGET:
				return target != null;
			case MIECPackage.ZONE__COMPONENTS:
				return components != null && !components.isEmpty();
			case MIECPackage.ZONE__TRUSTED:
				return trusted != TRUSTED_EDEFAULT;
			case MIECPackage.ZONE__COUNTERMEASURES:
				return countermeasures != null && !countermeasures.isEmpty();
			case MIECPackage.ZONE__PHYSICAL:
				return physical != PHYSICAL_EDEFAULT;
			case MIECPackage.ZONE__IS_SUB_ZONE_OF:
				return getIsSubZoneOf() != null;
			case MIECPackage.ZONE__FURTHER_DESC:
				return furtherDesc != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(", trusted: ");
		result.append(trusted);
		result.append(", physical: ");
		result.append(physical);
		result.append(')');
		return result.toString();
	}

} //ZoneImpl
