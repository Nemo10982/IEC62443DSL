/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.xtext.iec62443.baseModel.mIEC.Application;
import org.xtext.iec62443.baseModel.mIEC.Device;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.NumberExpression;
import org.xtext.iec62443.baseModel.mIEC.NumberOperation;
import org.xtext.iec62443.baseModel.mIEC.OperationNumberNary;
import org.xtext.iec62443.baseModel.mIEC.NumberExpression.ComputationErrorException;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Operation Number Nary</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.OperationNumberNaryImpl#getOperation <em>Operation</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.OperationNumberNaryImpl#getOps <em>Ops</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OperationNumberNaryImpl extends NumberExpressionImpl implements OperationNumberNary {
	/**
	 * The default value of the '{@link #getOperation() <em>Operation</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOperation()
	 * @generated
	 * @ordered
	 */
	protected static final NumberOperation OPERATION_EDEFAULT = NumberOperation.NONE;

	/**
	 * The cached value of the '{@link #getOperation() <em>Operation</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOperation()
	 * @generated
	 * @ordered
	 */
	protected NumberOperation operation = OPERATION_EDEFAULT;

	/**
	 * The cached value of the '{@link #getOps() <em>Ops</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOps()
	 * @generated
	 * @ordered
	 */
	protected EList<NumberExpression> ops;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationNumberNaryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MIECPackage.Literals.OPERATION_NUMBER_NARY;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NumberOperation getOperation() {
		return operation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setOperation(NumberOperation newOperation) {
		NumberOperation oldOperation = operation;
		operation = newOperation == null ? OPERATION_EDEFAULT : newOperation;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.OPERATION_NUMBER_NARY__OPERATION, oldOperation, operation));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<NumberExpression> getOps() {
		if (ops == null) {
			ops = new EObjectContainmentEList<NumberExpression>(NumberExpression.class, this, MIECPackage.OPERATION_NUMBER_NARY__OPS);
		}
		return ops;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.OPERATION_NUMBER_NARY__OPS:
				return ((InternalEList<?>)getOps()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MIECPackage.OPERATION_NUMBER_NARY__OPERATION:
				return getOperation();
			case MIECPackage.OPERATION_NUMBER_NARY__OPS:
				return getOps();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MIECPackage.OPERATION_NUMBER_NARY__OPERATION:
				setOperation((NumberOperation)newValue);
				return;
			case MIECPackage.OPERATION_NUMBER_NARY__OPS:
				getOps().clear();
				getOps().addAll((Collection<? extends NumberExpression>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MIECPackage.OPERATION_NUMBER_NARY__OPERATION:
				setOperation(OPERATION_EDEFAULT);
				return;
			case MIECPackage.OPERATION_NUMBER_NARY__OPS:
				getOps().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MIECPackage.OPERATION_NUMBER_NARY__OPERATION:
				return operation != OPERATION_EDEFAULT;
			case MIECPackage.OPERATION_NUMBER_NARY__OPS:
				return ops != null && !ops.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (operation: ");
		result.append(operation);
		result.append(')');
		return result.toString();
	}
	


	@Override
	public float computeValue(Application application, Device device) throws ComputationErrorException {
		List<Float> listVals = new ArrayList<>();
		for (NumberExpression op: ops) {
			listVals.add(op.computeValue(application, device));
		}
		Float res = listVals.get(0);
		switch(this.operation) {
		case ADD:
			for (int i = 1; i < listVals.size(); i++) {
				res = res + listVals.get(i);
			}
			return res;
		case DIV:
			for (int i = 1; i < listVals.size(); i++) {
				res = res / listVals.get(i);
			}
			return res;
		case MINUS:
			for (int i = 1; i < listVals.size(); i++) {
				res = res - listVals.get(i);
			}
			return res;
		case MUL:
			for (int i = 1; i < listVals.size(); i++) {
				res = res * listVals.get(i);
			}
			return res;
		case NONE:
			return res;
		default:
			break;
		}

		throw new ComputationErrorException("Problem computing a n-ary operation");
		
	}
	


	@Override
	public String ExpressiontoString() {
		String res = this.ops.get(0).ExpressiontoString();
		for (int i = 1; i < ops.size(); i++) {
			res = res + " " + operation.opToSymbol() + " " + this.ops.get(i).ExpressiontoString();
		}
		return res;
 	}

} //OperationNumberNaryImpl
