/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.iec62443.baseModel.mIEC.DataFlow;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.ZoneCharacteristics;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Zone Characteristics</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneCharacteristicsImpl#getPhysicalBoundary <em>Physical Boundary</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneCharacteristicsImpl#getOrganizations <em>Organizations</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneCharacteristicsImpl#getLogicalBoundary <em>Logical Boundary</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneCharacteristicsImpl#getPhysicalAccessPoints <em>Physical Access Points</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneCharacteristicsImpl#getSecurityPolicies <em>Security Policies</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneCharacteristicsImpl#getAssumptions <em>Assumptions</em>}</li>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ZoneCharacteristicsImpl#getDataflows <em>Dataflows</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ZoneCharacteristicsImpl extends MinimalEObjectImpl.Container implements ZoneCharacteristics {
	/**
	 * The default value of the '{@link #getPhysicalBoundary() <em>Physical Boundary</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPhysicalBoundary()
	 * @generated
	 * @ordered
	 */
	protected static final String PHYSICAL_BOUNDARY_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getPhysicalBoundary() <em>Physical Boundary</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPhysicalBoundary()
	 * @generated
	 * @ordered
	 */
	protected String physicalBoundary = PHYSICAL_BOUNDARY_EDEFAULT;

	/**
	 * The cached value of the '{@link #getOrganizations() <em>Organizations</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOrganizations()
	 * @generated
	 * @ordered
	 */
	protected EList<String> organizations;

	/**
	 * The default value of the '{@link #getLogicalBoundary() <em>Logical Boundary</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLogicalBoundary()
	 * @generated
	 * @ordered
	 */
	protected static final String LOGICAL_BOUNDARY_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getLogicalBoundary() <em>Logical Boundary</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLogicalBoundary()
	 * @generated
	 * @ordered
	 */
	protected String logicalBoundary = LOGICAL_BOUNDARY_EDEFAULT;

	/**
	 * The cached value of the '{@link #getPhysicalAccessPoints() <em>Physical Access Points</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPhysicalAccessPoints()
	 * @generated
	 * @ordered
	 */
	protected EList<String> physicalAccessPoints;

	/**
	 * The cached value of the '{@link #getSecurityPolicies() <em>Security Policies</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSecurityPolicies()
	 * @generated
	 * @ordered
	 */
	protected EList<String> securityPolicies;

	/**
	 * The cached value of the '{@link #getAssumptions() <em>Assumptions</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAssumptions()
	 * @generated
	 * @ordered
	 */
	protected EList<String> assumptions;

	/**
	 * The cached value of the '{@link #getDataflows() <em>Dataflows</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDataflows()
	 * @generated
	 * @ordered
	 */
	protected EList<DataFlow> dataflows;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ZoneCharacteristicsImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MIECPackage.Literals.ZONE_CHARACTERISTICS;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getPhysicalBoundary() {
		return physicalBoundary;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setPhysicalBoundary(String newPhysicalBoundary) {
		String oldPhysicalBoundary = physicalBoundary;
		physicalBoundary = newPhysicalBoundary;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.ZONE_CHARACTERISTICS__PHYSICAL_BOUNDARY, oldPhysicalBoundary, physicalBoundary));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<String> getOrganizations() {
		if (organizations == null) {
			organizations = new EDataTypeUniqueEList<String>(String.class, this, MIECPackage.ZONE_CHARACTERISTICS__ORGANIZATIONS);
		}
		return organizations;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getLogicalBoundary() {
		return logicalBoundary;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setLogicalBoundary(String newLogicalBoundary) {
		String oldLogicalBoundary = logicalBoundary;
		logicalBoundary = newLogicalBoundary;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, MIECPackage.ZONE_CHARACTERISTICS__LOGICAL_BOUNDARY, oldLogicalBoundary, logicalBoundary));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<String> getPhysicalAccessPoints() {
		if (physicalAccessPoints == null) {
			physicalAccessPoints = new EDataTypeUniqueEList<String>(String.class, this, MIECPackage.ZONE_CHARACTERISTICS__PHYSICAL_ACCESS_POINTS);
		}
		return physicalAccessPoints;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<String> getSecurityPolicies() {
		if (securityPolicies == null) {
			securityPolicies = new EDataTypeUniqueEList<String>(String.class, this, MIECPackage.ZONE_CHARACTERISTICS__SECURITY_POLICIES);
		}
		return securityPolicies;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<String> getAssumptions() {
		if (assumptions == null) {
			assumptions = new EDataTypeUniqueEList<String>(String.class, this, MIECPackage.ZONE_CHARACTERISTICS__ASSUMPTIONS);
		}
		return assumptions;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<DataFlow> getDataflows() {
		if (dataflows == null) {
			dataflows = new EObjectContainmentEList<DataFlow>(DataFlow.class, this, MIECPackage.ZONE_CHARACTERISTICS__DATAFLOWS);
		}
		return dataflows;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.ZONE_CHARACTERISTICS__DATAFLOWS:
				return ((InternalEList<?>)getDataflows()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MIECPackage.ZONE_CHARACTERISTICS__PHYSICAL_BOUNDARY:
				return getPhysicalBoundary();
			case MIECPackage.ZONE_CHARACTERISTICS__ORGANIZATIONS:
				return getOrganizations();
			case MIECPackage.ZONE_CHARACTERISTICS__LOGICAL_BOUNDARY:
				return getLogicalBoundary();
			case MIECPackage.ZONE_CHARACTERISTICS__PHYSICAL_ACCESS_POINTS:
				return getPhysicalAccessPoints();
			case MIECPackage.ZONE_CHARACTERISTICS__SECURITY_POLICIES:
				return getSecurityPolicies();
			case MIECPackage.ZONE_CHARACTERISTICS__ASSUMPTIONS:
				return getAssumptions();
			case MIECPackage.ZONE_CHARACTERISTICS__DATAFLOWS:
				return getDataflows();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MIECPackage.ZONE_CHARACTERISTICS__PHYSICAL_BOUNDARY:
				setPhysicalBoundary((String)newValue);
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__ORGANIZATIONS:
				getOrganizations().clear();
				getOrganizations().addAll((Collection<? extends String>)newValue);
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__LOGICAL_BOUNDARY:
				setLogicalBoundary((String)newValue);
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__PHYSICAL_ACCESS_POINTS:
				getPhysicalAccessPoints().clear();
				getPhysicalAccessPoints().addAll((Collection<? extends String>)newValue);
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__SECURITY_POLICIES:
				getSecurityPolicies().clear();
				getSecurityPolicies().addAll((Collection<? extends String>)newValue);
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__ASSUMPTIONS:
				getAssumptions().clear();
				getAssumptions().addAll((Collection<? extends String>)newValue);
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__DATAFLOWS:
				getDataflows().clear();
				getDataflows().addAll((Collection<? extends DataFlow>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MIECPackage.ZONE_CHARACTERISTICS__PHYSICAL_BOUNDARY:
				setPhysicalBoundary(PHYSICAL_BOUNDARY_EDEFAULT);
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__ORGANIZATIONS:
				getOrganizations().clear();
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__LOGICAL_BOUNDARY:
				setLogicalBoundary(LOGICAL_BOUNDARY_EDEFAULT);
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__PHYSICAL_ACCESS_POINTS:
				getPhysicalAccessPoints().clear();
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__SECURITY_POLICIES:
				getSecurityPolicies().clear();
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__ASSUMPTIONS:
				getAssumptions().clear();
				return;
			case MIECPackage.ZONE_CHARACTERISTICS__DATAFLOWS:
				getDataflows().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MIECPackage.ZONE_CHARACTERISTICS__PHYSICAL_BOUNDARY:
				return PHYSICAL_BOUNDARY_EDEFAULT == null ? physicalBoundary != null : !PHYSICAL_BOUNDARY_EDEFAULT.equals(physicalBoundary);
			case MIECPackage.ZONE_CHARACTERISTICS__ORGANIZATIONS:
				return organizations != null && !organizations.isEmpty();
			case MIECPackage.ZONE_CHARACTERISTICS__LOGICAL_BOUNDARY:
				return LOGICAL_BOUNDARY_EDEFAULT == null ? logicalBoundary != null : !LOGICAL_BOUNDARY_EDEFAULT.equals(logicalBoundary);
			case MIECPackage.ZONE_CHARACTERISTICS__PHYSICAL_ACCESS_POINTS:
				return physicalAccessPoints != null && !physicalAccessPoints.isEmpty();
			case MIECPackage.ZONE_CHARACTERISTICS__SECURITY_POLICIES:
				return securityPolicies != null && !securityPolicies.isEmpty();
			case MIECPackage.ZONE_CHARACTERISTICS__ASSUMPTIONS:
				return assumptions != null && !assumptions.isEmpty();
			case MIECPackage.ZONE_CHARACTERISTICS__DATAFLOWS:
				return dataflows != null && !dataflows.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (physicalBoundary: ");
		result.append(physicalBoundary);
		result.append(", organizations: ");
		result.append(organizations);
		result.append(", logicalBoundary: ");
		result.append(logicalBoundary);
		result.append(", physicalAccessPoints: ");
		result.append(physicalAccessPoints);
		result.append(", securityPolicies: ");
		result.append(securityPolicies);
		result.append(", assumptions: ");
		result.append(assumptions);
		result.append(')');
		return result.toString();
	}

} //ZoneCharacteristicsImpl
