/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC.impl;

import org.eclipse.emf.ecore.EClass;

import org.xtext.iec62443.baseModel.mIEC.DeviceReference;
import org.xtext.iec62443.baseModel.mIEC.FloatValue;
import org.xtext.iec62443.baseModel.mIEC.IntegerValue;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.Property;
import org.xtext.iec62443.baseModel.mIEC.StringValue;
import org.xtext.iec62443.baseModel.mIEC.Value;
import org.xtext.iec62443.baseModel.mIEC.ValueOrReference;
import org.xtext.iec62443.baseModel.mIEC.Application;
import org.xtext.iec62443.baseModel.mIEC.BooleanValue;
import org.xtext.iec62443.baseModel.mIEC.Device;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Device Reference</b></em>'.
 * <!-- end-user-doc -->
 *
 * @generated
 */
public class DeviceReferenceImpl extends ReferenceImpl implements DeviceReference {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceReferenceImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MIECPackage.Literals.DEVICE_REFERENCE;
	}

	@Override
	public Value getValue() {
		String pname = this.getReference();
		for(Property p : ((Application)this.eContainer.eContainer()).getExecutedOn().getProperties()) {
			if (p.getName().equals(pname)) return p.getValue();
		}
		return null;
	}

	@Override
	public Value getValue(Device d) {
		String pname = this.getReference();
		for(Property p : d.getProperties()) {
			if (p.getName().equals(pname)) return p.getValue();
		}
		return null;
	}

	@Override
	public int getRefType() {
		return ValueOrReference.REF;
	}
 
	@Override
	public float computeValue(Application a, Device d) throws ComputationErrorException {
		if (d.getProperty(this.reference)!=null) {
			Value val = d.getProperty(this.reference).getValue();
			if (val.getType() == Value.INTEGER) {
				return ((IntegerValue) val).computeValue(a,d);
			}
			if (val.getType() == Value.FLOAT) {
				return ((FloatValue) val).computeValue(a,d);
				
			}
			throw new ComputationErrorException("Error in device reference: mistyped property");
		}
		// return 0 if no corresponding property
		return 0;
		// throw new ComputationErrorException("Error in device reference: no such property");
	}

	@Override
	public boolean getBooleanRes(Application a, Device d) throws ComputationErrorException {
		if (d.getProperty(this.reference)!=null) {
			Value val = d.getProperty(this.reference).getValue();
			if (val.getType() == Value.BOOLEAN) {
				return ((BooleanValue) val).getBooleanRes(a,d);
			}
			throw new ComputationErrorException("Error in device reference: mistyped property");
		}
		// return false if no corresponding property
		return false;
		// throw new ComputationErrorException("Error in device reference: no such property");
	}

	@Override
	public String computeString(Application a, Device d) throws ComputationErrorException {
	if (d.getProperty(this.reference)!=null) {
		Value val = d.getProperty(this.reference).getValue();
		if (val.getType() == Value.BOOLEAN) {
			return ((StringValue) val).computeString(a,d);
		}
		throw new ComputationErrorException("Error in device reference: mistyped property");
	}
	// return "" if no corresponding property
	return "";
	// throw new ComputationErrorException("Error in device reference: no such property");
	}
	


	@Override
	public String ExpressiontoString() {
		return "device." + reference;
	}
	
	

} //DeviceReferenceImpl
