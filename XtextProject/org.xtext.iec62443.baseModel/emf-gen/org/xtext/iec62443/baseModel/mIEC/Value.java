/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Value</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see org.xtext.iec62443.baseModel.mIEC.MIECPackage#getValue()
 * @model abstract="true"
 * @generated
 */
public interface Value extends ValueOrReference {
	
	// Defines constants for value type
	public static final int BOOLEAN = 0;
	public static final int INTEGER = 1;
	public static final int FLOAT = 2;
	public static final int STRING = 3;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model kind="operation" required="true"
	 * @generated
	 */
	int getType();

	public String getStringValue();
	
	
	static boolean compareBooleans(boolean b1, Operation op, boolean b2) {
		switch(op) {
		case EQ:
			return b1 == b2;
		case NE:
			return b1 != b2;
		case LT:
			return b1==false && b2==true;
		case LE:
			return b1 == false || b2 == true;
		case GE:
			return b1 == true || b2 == false;
		case GT:
			return b1 == true && b2 == false;
		}
		// Never happens
		return false;
	}
	
	
	static boolean compareIntegers(int i1, Operation op, int i2) {
		switch(op) {
		case EQ:
			return i1 == i2;
		case NE:
			return i1 != i2;
		case LT:
			return i1 < i2;
		case LE:
			return i1 <= i2;
		case GE:
			return i1 >= i2;
		case GT:
			return i1 > i2;
		}
		// Never happens
		return false;
	}
	
	
	static boolean compareFloats(float f1, Operation op, float f2) {
		switch(op) {
		case EQ:
			return f1 == f2;
		case NE:
			return f1 != f2;
		case LT:
			return f1 < f2;
		case LE:
			return f1 <= f2;
		case GE:
			return f1 >= f2;
		case GT:
			return f1 > f2;
		}
		// Never happens
		return false;
	}
	
	
	static boolean compareStrings(String s1, Operation op, String s2) {

		switch(op) {
		case EQ:
			return s1.compareTo(s2) == 0;
		case NE:
			return s1.compareTo(s2) != 0;
		case LT:
			return s1.compareTo(s2) < 0;
		case LE:
			return s1.compareTo(s2) <= 0;
		case GE:
			return s1.compareTo(s2) >= 0;
		case GT:
			return s1.compareTo(s2) > 0;
		}
		// Never happens
		return false;
	}
	
	static boolean compare(Value value, Operation op, Value value2) {
		if (value.getType() == value2.getType()) {
			switch(value.getType()) {
			case BOOLEAN:
				boolean b1 = ((BooleanValue)value).isValue();
				boolean b2 = ((BooleanValue)value2).isValue();
				
				return compareBooleans(b1,op,b2);
				
			case INTEGER:
				int i1 = ((IntegerValue)value).getValue();
				int i2 = ((IntegerValue)value2).getValue();

				return compareIntegers(i1,op,i2);
				
			case FLOAT:
				float f1 = ((FloatValue)value).getValue();
				float f2 = ((FloatValue)value2).getValue();
				
				return compareFloats(f1,op,f2);
				
			case STRING:
				String s1 = ((StringValue)value).getValue();
				String s2 = ((StringValue)value2).getValue();

				return compareStrings(s1,op,s2);
			}
		}
		if (value.getType() == Value.INTEGER && value2.getType() == Value.FLOAT) {
			float f1 = ((IntegerValue)value).getValue();
			float f2 = ((FloatValue)value2).getValue();

			return compareFloats(f1,op,f2);
		}
		if (value2.getType() == Value.INTEGER && value.getType() == Value.FLOAT) {
			float f1 = ((FloatValue)value).getValue();
			float f2 = ((IntegerValue)value2).getValue();

			return compareFloats(f1,op,f2);
		}
		
		return false;
		
	}
} // Value
