/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.impl.EFactoryImpl;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.xtext.iec62443.baseModel.mIEC.Application;
import org.xtext.iec62443.baseModel.mIEC.BooleanValue;
import org.xtext.iec62443.baseModel.mIEC.Channel;
import org.xtext.iec62443.baseModel.mIEC.ClassicalZone;
import org.xtext.iec62443.baseModel.mIEC.Comparison;
import org.xtext.iec62443.baseModel.mIEC.Conduit;
import org.xtext.iec62443.baseModel.mIEC.CounterMeasure;
import org.xtext.iec62443.baseModel.mIEC.DataFlow;
import org.xtext.iec62443.baseModel.mIEC.Device;
import org.xtext.iec62443.baseModel.mIEC.DeviceReference;
import org.xtext.iec62443.baseModel.mIEC.FloatValue;
import org.xtext.iec62443.baseModel.mIEC.IntegerValue;
import org.xtext.iec62443.baseModel.mIEC.MIECFactory;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.Model;
import org.xtext.iec62443.baseModel.mIEC.NumberOperation;
import org.xtext.iec62443.baseModel.mIEC.NumberOperationFunction;
import org.xtext.iec62443.baseModel.mIEC.Operation;
import org.xtext.iec62443.baseModel.mIEC.OperationConstraint;
import org.xtext.iec62443.baseModel.mIEC.OperationNumber;
import org.xtext.iec62443.baseModel.mIEC.OperationNumberNary;
import org.xtext.iec62443.baseModel.mIEC.PresenceConstraint;
import org.xtext.iec62443.baseModel.mIEC.Property;
import org.xtext.iec62443.baseModel.mIEC.Reference;
import org.xtext.iec62443.baseModel.mIEC.SecurityLevel;
import org.xtext.iec62443.baseModel.mIEC.SecurityLevels;
import org.xtext.iec62443.baseModel.mIEC.SelfReference;
import org.xtext.iec62443.baseModel.mIEC.StringValue;
import org.xtext.iec62443.baseModel.mIEC.TernaryOp;
import org.xtext.iec62443.baseModel.mIEC.ZoneCharacteristics;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MIECFactoryImpl extends EFactoryImpl implements MIECFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static MIECFactory init() {
		try {
			MIECFactory theMIECFactory = (MIECFactory)EPackage.Registry.INSTANCE.getEFactory(MIECPackage.eNS_URI);
			if (theMIECFactory != null) {
				return theMIECFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new MIECFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MIECFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case MIECPackage.MODEL: return createModel();
			case MIECPackage.SECURITY_LEVELS: return createSecurityLevels();
			case MIECPackage.CONDUIT: return createConduit();
			case MIECPackage.CHANNEL: return createChannel();
			case MIECPackage.COUNTER_MEASURE: return createCounterMeasure();
			case MIECPackage.DEVICE: return createDevice();
			case MIECPackage.SYSTEM: return createSystem();
			case MIECPackage.CLASSICAL_ZONE: return createClassicalZone();
			case MIECPackage.APPLICATION: return createApplication();
			case MIECPackage.PROPERTY: return createProperty();
			case MIECPackage.OPERATION_CONSTRAINT: return createOperationConstraint();
			case MIECPackage.PRESENCE_CONSTRAINT: return createPresenceConstraint();
			case MIECPackage.STRING_VALUE: return createStringValue();
			case MIECPackage.FLOAT_VALUE: return createFloatValue();
			case MIECPackage.INTEGER_VALUE: return createIntegerValue();
			case MIECPackage.BOOLEAN_VALUE: return createBooleanValue();
			case MIECPackage.SELF_REFERENCE: return createSelfReference();
			case MIECPackage.DEVICE_REFERENCE: return createDeviceReference();
			case MIECPackage.COMPARISON: return createComparison();
			case MIECPackage.OPERATION_NUMBER: return createOperationNumber();
			case MIECPackage.TERNARY_OP: return createTernaryOp();
			case MIECPackage.OPERATION_NUMBER_NARY: return createOperationNumberNary();
			case MIECPackage.DATA_FLOW: return createDataFlow();
			case MIECPackage.ZONE_CHARACTERISTICS: return createZoneCharacteristics();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
			case MIECPackage.SECURITY_LEVEL:
				return createSecurityLevelFromString(eDataType, initialValue);
			case MIECPackage.OPERATION:
				return createOperationFromString(eDataType, initialValue);
			case MIECPackage.NUMBER_OPERATION:
				return createNumberOperationFromString(eDataType, initialValue);
			case MIECPackage.NUMBER_OPERATION_FUNCTION:
				return createNumberOperationFunctionFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
			case MIECPackage.SECURITY_LEVEL:
				return convertSecurityLevelToString(eDataType, instanceValue);
			case MIECPackage.OPERATION:
				return convertOperationToString(eDataType, instanceValue);
			case MIECPackage.NUMBER_OPERATION:
				return convertNumberOperationToString(eDataType, instanceValue);
			case MIECPackage.NUMBER_OPERATION_FUNCTION:
				return convertNumberOperationFunctionToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Model createModel() {
		ModelImpl model = new ModelImpl();
		return model;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SecurityLevels createSecurityLevels() {
		SecurityLevelsImpl securityLevels = new SecurityLevelsImpl();
		return securityLevels;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Conduit createConduit() {
		ConduitImpl conduit = new ConduitImpl();
		return conduit;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Channel createChannel() {
		ChannelImpl channel = new ChannelImpl();
		return channel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public CounterMeasure createCounterMeasure() {
		CounterMeasureImpl counterMeasure = new CounterMeasureImpl();
		return counterMeasure;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Device createDevice() {
		DeviceImpl device = new DeviceImpl();
		return device;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public org.xtext.iec62443.baseModel.mIEC.System createSystem() {
		SystemImpl system = new SystemImpl();
		return system;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ClassicalZone createClassicalZone() {
		ClassicalZoneImpl classicalZone = new ClassicalZoneImpl();
		return classicalZone;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Application createApplication() {
		ApplicationImpl application = new ApplicationImpl();
		return application;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Property createProperty() {
		PropertyImpl property = new PropertyImpl();
		return property;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public OperationConstraint createOperationConstraint() {
		OperationConstraintImpl operationConstraint = new OperationConstraintImpl();
		return operationConstraint;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public PresenceConstraint createPresenceConstraint() {
		PresenceConstraintImpl presenceConstraint = new PresenceConstraintImpl();
		return presenceConstraint;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public StringValue createStringValue() {
		StringValueImpl stringValue = new StringValueImpl();
		return stringValue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public FloatValue createFloatValue() {
		FloatValueImpl floatValue = new FloatValueImpl();
		return floatValue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public IntegerValue createIntegerValue() {
		IntegerValueImpl integerValue = new IntegerValueImpl();
		return integerValue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public BooleanValue createBooleanValue() {
		BooleanValueImpl booleanValue = new BooleanValueImpl();
		return booleanValue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SelfReference createSelfReference() {
		SelfReferenceImpl selfReference = new SelfReferenceImpl();
		return selfReference;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public DeviceReference createDeviceReference() {
		DeviceReferenceImpl deviceReference = new DeviceReferenceImpl();
		return deviceReference;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Comparison createComparison() {
		ComparisonImpl comparison = new ComparisonImpl();
		return comparison;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public OperationNumber createOperationNumber() {
		OperationNumberImpl operationNumber = new OperationNumberImpl();
		return operationNumber;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public TernaryOp createTernaryOp() {
		TernaryOpImpl ternaryOp = new TernaryOpImpl();
		return ternaryOp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public OperationNumberNary createOperationNumberNary() {
		OperationNumberNaryImpl operationNumberNary = new OperationNumberNaryImpl();
		return operationNumberNary;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public DataFlow createDataFlow() {
		DataFlowImpl dataFlow = new DataFlowImpl();
		return dataFlow;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ZoneCharacteristics createZoneCharacteristics() {
		ZoneCharacteristicsImpl zoneCharacteristics = new ZoneCharacteristicsImpl();
		return zoneCharacteristics;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SecurityLevel createSecurityLevelFromString(EDataType eDataType, String initialValue) {
		SecurityLevel result = SecurityLevel.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertSecurityLevelToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Operation createOperationFromString(EDataType eDataType, String initialValue) {
		Operation result = Operation.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertOperationToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NumberOperation createNumberOperationFromString(EDataType eDataType, String initialValue) {
		NumberOperation result = NumberOperation.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertNumberOperationToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NumberOperationFunction createNumberOperationFunctionFromString(EDataType eDataType, String initialValue) {
		NumberOperationFunction result = NumberOperationFunction.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertNumberOperationFunctionToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public MIECPackage getMIECPackage() {
		return (MIECPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static MIECPackage getPackage() {
		return MIECPackage.eINSTANCE;
	}

} //MIECFactoryImpl
