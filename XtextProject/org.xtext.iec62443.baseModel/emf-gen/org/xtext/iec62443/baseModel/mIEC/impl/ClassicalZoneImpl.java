/**
 * generated by Xtext 2.31.0
 */
package org.xtext.iec62443.baseModel.mIEC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.xtext.iec62443.baseModel.mIEC.ClassicalZone;
import org.xtext.iec62443.baseModel.mIEC.MIECPackage;
import org.xtext.iec62443.baseModel.mIEC.Zone;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Classical Zone</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.iec62443.baseModel.mIEC.impl.ClassicalZoneImpl#getSubZones <em>Sub Zones</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClassicalZoneImpl extends ZoneImpl implements ClassicalZone {
	/**
	 * The cached value of the '{@link #getSubZones() <em>Sub Zones</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSubZones()
	 * @generated
	 * @ordered
	 */
	protected EList<Zone> subZones;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassicalZoneImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return MIECPackage.Literals.CLASSICAL_ZONE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Zone> getSubZones() {
		if (subZones == null) {
			subZones = new EObjectContainmentWithInverseEList<Zone>(Zone.class, this, MIECPackage.CLASSICAL_ZONE__SUB_ZONES, MIECPackage.ZONE__IS_SUB_ZONE_OF);
		}
		return subZones;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.CLASSICAL_ZONE__SUB_ZONES:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getSubZones()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case MIECPackage.CLASSICAL_ZONE__SUB_ZONES:
				return ((InternalEList<?>)getSubZones()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case MIECPackage.CLASSICAL_ZONE__SUB_ZONES:
				return getSubZones();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case MIECPackage.CLASSICAL_ZONE__SUB_ZONES:
				getSubZones().clear();
				getSubZones().addAll((Collection<? extends Zone>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case MIECPackage.CLASSICAL_ZONE__SUB_ZONES:
				getSubZones().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case MIECPackage.CLASSICAL_ZONE__SUB_ZONES:
				return subZones != null && !subZones.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //ClassicalZoneImpl
