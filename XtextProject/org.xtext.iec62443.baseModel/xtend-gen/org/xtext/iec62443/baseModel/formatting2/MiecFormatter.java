/**
 * generated by Xtext 2.32.0
 */
package org.xtext.iec62443.baseModel.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.iec62443.baseModel.mIEC.Channel;
import org.xtext.iec62443.baseModel.mIEC.ClassicalZone;
import org.xtext.iec62443.baseModel.mIEC.Component;
import org.xtext.iec62443.baseModel.mIEC.Conduit;
import org.xtext.iec62443.baseModel.mIEC.CounterMeasure;
import org.xtext.iec62443.baseModel.mIEC.Device;
import org.xtext.iec62443.baseModel.mIEC.Model;
import org.xtext.iec62443.baseModel.mIEC.SecurityLevels;
import org.xtext.iec62443.baseModel.mIEC.Zone;
import org.xtext.iec62443.baseModel.services.MiecGrammarAccess;

@SuppressWarnings("all")
public class MiecFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MiecGrammarAccess _miecGrammarAccess;

  @Inject
  private MiecGrammarAccess ga;

  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<ClassicalZone> _zones = model.getZones();
    for (final ClassicalZone zone : _zones) {
      document.<ClassicalZone>format(zone);
    }
    EList<Conduit> _conduits = model.getConduits();
    for (final Conduit conduit : _conduits) {
      document.<Conduit>format(conduit);
    }
  }

  protected void _format(final ClassicalZone zone, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(zone).keyword(this.ga.getClassicalZoneAccess().getLeftCurlyBracketKeyword_4()), _function), 
      document.prepend(this.textRegionExtensions.regionFor(zone).keyword(this.ga.getClassicalZoneAccess().getRightCurlyBracketKeyword_11()), _function_1), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(zone).keyword(this.ga.getClassicalZoneAccess().getLeftCurlyBracketKeyword_8_2()), _function_3), 
      document.prepend(this.textRegionExtensions.regionFor(zone).keyword(this.ga.getClassicalZoneAccess().getRightCurlyBracketKeyword_8_5()), _function_4), _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(zone).keyword(this.ga.getClassicalZoneAccess().getLeftCurlyBracketKeyword_8_2()), _function_6), 
      document.prepend(this.textRegionExtensions.regionFor(zone).keyword(this.ga.getClassicalZoneAccess().getRightCurlyBracketKeyword_8_5()), _function_7), _function_8);
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(zone).keyword(this.ga.getClassicalZoneAccess().getLeftCurlyBracketKeyword_9_2()), _function_9), 
      document.prepend(this.textRegionExtensions.regionFor(zone).keyword(this.ga.getClassicalZoneAccess().getRightCurlyBracketKeyword_9_5()), _function_10), _function_11);
    final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_13 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_14 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(zone).keyword(this.ga.getClassicalZoneAccess().getLeftCurlyBracketKeyword_10_2()), _function_12), 
      document.prepend(this.textRegionExtensions.regionFor(zone).keyword(this.ga.getClassicalZoneAccess().getRightCurlyBracketKeyword_10_5()), _function_13), _function_14);
    List<ISemanticRegion> _keywords = this.textRegionExtensions.regionFor(zone).keywords(",");
    for (final ISemanticRegion k : _keywords) {
      final Procedure1<IHiddenRegionFormatter> _function_15 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(k, _function_15);
    }
    List<ISemanticRegion> _keywords_1 = this.textRegionExtensions.regionFor(zone).keywords(";");
    for (final ISemanticRegion k_1 : _keywords_1) {
      final Procedure1<IHiddenRegionFormatter> _function_16 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(k_1, _function_16);
    }
    document.<SecurityLevels>format(zone.getTarget());
    document.<SecurityLevels>format(zone.getAchieved());
    EList<Component> _components = zone.getComponents();
    for (final Component component : _components) {
      document.<Component>format(component);
    }
    EList<CounterMeasure> _countermeasures = zone.getCountermeasures();
    for (final CounterMeasure counterMeasure : _countermeasures) {
      document.<CounterMeasure>format(counterMeasure);
    }
    EList<Zone> _subZones = zone.getSubZones();
    for (final Zone zoneChild : _subZones) {
      document.<Zone>format(zoneChild);
    }
  }

  protected void _format(final Conduit conduit, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getLeftParenthesisKeyword_6()), _function), 
      document.prepend(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getRightParenthesisKeyword_9()), _function_1), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getLeftCurlyBracketKeyword_4()), _function_3), 
      document.prepend(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getRightCurlyBracketKeyword_17()), _function_4), _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getLeftCurlyBracketKeyword_14_2()), _function_6), 
      document.prepend(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getRightCurlyBracketKeyword_14_5()), _function_7), _function_8);
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getLeftCurlyBracketKeyword_16_2()), _function_9), 
      document.prepend(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getRightCurlyBracketKeyword_16_5()), _function_10), _function_11);
    final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_13 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_14 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getLeftCurlyBracketKeyword_14_2()), _function_12), 
      document.prepend(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getRightCurlyBracketKeyword_14_5()), _function_13), _function_14);
    final Procedure1<IHiddenRegionFormatter> _function_15 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_16 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_17 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getLeftCurlyBracketKeyword_15_2()), _function_15), 
      document.prepend(this.textRegionExtensions.regionFor(conduit).keyword(this.ga.getConduitAccess().getRightCurlyBracketKeyword_15_5()), _function_16), _function_17);
    List<ISemanticRegion> _keywords = this.textRegionExtensions.regionFor(conduit).keywords(",");
    for (final ISemanticRegion k : _keywords) {
      final Procedure1<IHiddenRegionFormatter> _function_18 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(k, _function_18);
    }
    List<ISemanticRegion> _keywords_1 = this.textRegionExtensions.regionFor(conduit).keywords(";");
    for (final ISemanticRegion k_1 : _keywords_1) {
      final Procedure1<IHiddenRegionFormatter> _function_19 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(k_1, _function_19);
    }
    document.<SecurityLevels>format(conduit.getTarget());
    document.<SecurityLevels>format(conduit.getAchieved());
    EList<Component> _components = conduit.getComponents();
    for (final Component component : _components) {
      document.<Component>format(component);
    }
    EList<CounterMeasure> _countermeasures = conduit.getCountermeasures();
    for (final CounterMeasure counterMeasure : _countermeasures) {
      document.<CounterMeasure>format(counterMeasure);
    }
    EList<Channel> _channels = conduit.getChannels();
    for (final Channel channel : _channels) {
      document.<Channel>format(channel);
    }
  }

  protected void _format(final Channel ch, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(ch).keyword(this.ga.getChannelAccess().getLeftParenthesisKeyword_0()), _function), 
      document.prepend(this.textRegionExtensions.regionFor(ch).keyword(this.ga.getChannelAccess().getRightParenthesisKeyword_10()), _function_1), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(ch).keyword(this.ga.getChannelAccess().getLeftCurlyBracketKeyword_4()), _function_3), 
      document.prepend(this.textRegionExtensions.regionFor(ch).keyword(this.ga.getChannelAccess().getRightCurlyBracketKeyword_9()), _function_4), _function_5);
  }

  protected void _format(final SecurityLevels sl, @Extension final IFormattableDocument document) {
  }

  protected void _format(final Component comp, @Extension final IFormattableDocument document) {
    List<ISemanticRegion> _keywords = this.textRegionExtensions.regionFor(comp).keywords(",");
    for (final ISemanticRegion k : _keywords) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(k, _function);
    }
    List<ISemanticRegion> _keywords_1 = this.textRegionExtensions.regionFor(comp).keywords(";");
    for (final ISemanticRegion k_1 : _keywords_1) {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(k_1, _function_1);
    }
    int _type = comp.getType();
    boolean _equals = (_type == Component.APPLICATION);
    if (_equals) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(
        document.append(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getApplicationAccess().getLeftParenthesisKeyword_0()), _function_2), 
        document.prepend(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getApplicationAccess().getRightParenthesisKeyword_15()), _function_3), _function_4);
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(
        document.append(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getApplicationAccess().getLeftCurlyBracketKeyword_11_2()), _function_5), 
        document.prepend(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getApplicationAccess().getRightCurlyBracketKeyword_11_5()), _function_6), _function_7);
      final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(
        document.append(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getApplicationAccess().getLeftCurlyBracketKeyword_11_2()), _function_8), 
        document.prepend(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getApplicationAccess().getRightCurlyBracketKeyword_11_5()), _function_9), _function_10);
      final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_13 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(
        document.append(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getApplicationAccess().getLeftCurlyBracketKeyword_13_3()), _function_11), 
        document.prepend(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getApplicationAccess().getRightCurlyBracketKeyword_13_6()), _function_12), _function_13);
      final Procedure1<IHiddenRegionFormatter> _function_14 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_15 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_16 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(
        document.append(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getApplicationAccess().getLeftCurlyBracketKeyword_14_2()), _function_14), 
        document.prepend(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getApplicationAccess().getRightCurlyBracketKeyword_14_5()), _function_15), _function_16);
    }
    int _type_1 = comp.getType();
    boolean _equals_1 = (_type_1 == Component.DEVICE);
    if (_equals_1) {
      final Procedure1<IHiddenRegionFormatter> _function_17 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_18 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_19 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(
        document.append(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getDeviceAccess().getLeftParenthesisKeyword_0()), _function_17), 
        document.prepend(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getDeviceAccess().getRightParenthesisKeyword_7()), _function_18), _function_19);
      final Procedure1<IHiddenRegionFormatter> _function_20 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_21 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_22 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(
        document.append(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getDeviceAccess().getLeftCurlyBracketKeyword_6_2()), _function_20), 
        document.prepend(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getDeviceAccess().getRightCurlyBracketKeyword_6_5()), _function_21), _function_22);
    }
    int _type_2 = comp.getType();
    boolean _equals_2 = (_type_2 == Component.SYSTEM);
    if (_equals_2) {
      final Procedure1<IHiddenRegionFormatter> _function_23 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_24 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_25 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(
        document.append(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getSystemAccess().getLeftParenthesisKeyword_0()), _function_23), 
        document.prepend(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getSystemAccess().getRightParenthesisKeyword_8()), _function_24), _function_25);
      final Procedure1<IHiddenRegionFormatter> _function_26 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_27 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_28 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(
        document.append(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getSystemAccess().getLeftCurlyBracketKeyword_6_2()), _function_26), 
        document.prepend(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getSystemAccess().getRightCurlyBracketKeyword_6_5()), _function_27), _function_28);
      final Procedure1<IHiddenRegionFormatter> _function_29 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_30 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_31 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(
        document.append(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getSystemAccess().getLeftCurlyBracketKeyword_7_2()), _function_29), 
        document.prepend(this.textRegionExtensions.regionFor(comp).keyword(this.ga.getSystemAccess().getRightCurlyBracketKeyword_7_5()), _function_30), _function_31);
      EList<Device> _devices = ((org.xtext.iec62443.baseModel.mIEC.System) comp).getDevices();
      for (final Device d : _devices) {
        document.<Device>format(d);
      }
    }
  }

  protected void _format(final CounterMeasure cm, @Extension final IFormattableDocument document) {
  }

  public void format(final Object zone, final IFormattableDocument document) {
    if (zone instanceof XtextResource) {
      _format((XtextResource)zone, document);
      return;
    } else if (zone instanceof ClassicalZone) {
      _format((ClassicalZone)zone, document);
      return;
    } else if (zone instanceof Conduit) {
      _format((Conduit)zone, document);
      return;
    } else if (zone instanceof Channel) {
      _format((Channel)zone, document);
      return;
    } else if (zone instanceof Component) {
      _format((Component)zone, document);
      return;
    } else if (zone instanceof CounterMeasure) {
      _format((CounterMeasure)zone, document);
      return;
    } else if (zone instanceof Model) {
      _format((Model)zone, document);
      return;
    } else if (zone instanceof SecurityLevels) {
      _format((SecurityLevels)zone, document);
      return;
    } else if (zone instanceof EObject) {
      _format((EObject)zone, document);
      return;
    } else if (zone == null) {
      _format((Void)null, document);
      return;
    } else if (zone != null) {
      _format(zone, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(zone, document).toString());
    }
  }
}
