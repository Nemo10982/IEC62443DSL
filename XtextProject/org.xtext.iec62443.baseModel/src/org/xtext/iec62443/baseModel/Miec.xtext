// automatically generated by Xtext
grammar org.xtext.iec62443.baseModel.Miec with org.eclipse.xtext.common.Terminals

import "http://www.xtext.org/example/mydsl/mIEC"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	(
		'Model' 'description' '{'
			'name' '=' name=ID ';'
			'function' '=' function=STRING ';'
			'equipment' '=' equipmentDescription=STRING ';'
			'assumptions' '=' assumptionsOnLocation=STRING ';'
		'}'
	)?
	(
		zones+=ClassicalZone |
		conduits+=Conduit
	)*
	;

Component returns Component:
	Device | System | Application;

Zone returns Zone:
	ClassicalZone | Conduit
;

ClassicalZone returns ClassicalZone:
	(trusted?='trusted')?
	(physical?='physical')?
	'Zone'
	name=ID
	'{'
		'target' target=SecurityLevels
		(';' furtherDesc=FurtherZoneDescription)?
		(';' 'components' '{' components+=Component ( "," components+=Component)* '}')?
		(';' 'countermeasures' '{' countermeasures+=counterMeasure ( "," countermeasures+=counterMeasure)* '}' )?
		(";" 'subzones' '{' subZones+=Zone (';' subZones+=Zone)* '}' )?
	'}';

SecurityLevels returns SecurityLevels: 
	'['
		accessControl=SecurityLevel ','
		useControl=SecurityLevel ','
		systemIntegrity=SecurityLevel ','
		dataConfidentiality=SecurityLevel ','
		restrictedDataFlow=SecurityLevel ','
		timelyResponse=SecurityLevel ','
		resourceAvailability=SecurityLevel 	
	']';

counterMeasure returns CounterMeasure:
	'('
		
	(inactive?='inactive')? name=ID ';'
		'capability' capability=SecurityLevels
		(';' 'cost' cost = PositiveIntegerValue)?
	')';

Conduit returns Conduit:
	(trusted?='trusted')?
	(physical?='physical')?
	'Conduit'
	name=ID
	'{'
		'connects' '(' connects+=[ClassicalZone] ( "," connects+=[ClassicalZone])* ')'  ';'
		'target' target=SecurityLevels
		(';' furtherDesc=FurtherZoneDescription)?
		(';' 'components' '{' components+=Component ( "," components+=Component)* '}' )?
		(';' 'countermeasures' '{' countermeasures+=counterMeasure ( "," countermeasures+=counterMeasure)* '}' )?
		(';' 'channels' '{' channels+=Channel ( "," channels+=Channel)* '}' )?
	'}';

FurtherZoneDescription returns ZoneCharacteristics:
	logicalBoundary = STRING ';'
	physicalBoundary = STRING
	(';' 'organisations' '{' organizations+=STRING (',' organizations+=STRING)*'}')?
	(';' 'accessPoints' '{' physicalAccessPoints+=STRING (',' physicalAccessPoints+=STRING)*'}')?
	(';' 'policies' '{' securityPolicies+=STRING (',' securityPolicies+=STRING)*'}')?
	(';' 'dataflows' '{' dataflows+=Dataflow (',' dataflows+=Dataflow)*'}')?
	
;

// Will need to define a specific scope for this rule
Dataflow returns DataFlow:
	"("
		source=[Component]  ','
		destination=[Component]','
		protocol=STRING
	")"
;

enum SecurityLevel returns SecurityLevel:
				SL0 = 'SL0' | SL1 = 'SL1' | SL2 = 'SL2' | SL3 = 'SL3' | SL4 = 'SL4' | NR = "NR";

Device returns Device:
	'(' 
		(
			(network?='network')?
			(embedded?='embedded')?
			(host?='host')?
			'device'
		)?
		name=ID ';' 
		'capability' capability=SecurityLevels
		(';' 'properties' '{' properties +=Property ( "," properties+=Property)*'}')?
	')';

Property returns Property:
	name=ID '=' value=Value
;

System returns System:
	'('
		'system' name=ID ';'
		'capability' capability=SecurityLevels
		(';' 'devices' '{' devices+=Device ( "," devices+=Device)* '}' )? 
		(';' 'properties' '{' properties +=Property ( "," properties+=Property)*'}')?
	')';

Application returns Application:
	'(' 
		'application' name=ID ';'
		'executed' 'on' (executedOn=[Device] | 'nothing') ';'
		'capability' capability=SecurityLevels 
		(';' 'scoreCalc' '(' scoreExpr=NumberExpression ')' )?
		(';' 'constraints' '{' constraints +=Constraint ( "," constraints+=Constraint)*'}')?
		(';' 'needs' 'level' sLevelConstraint=SecurityLevels )?
		(';' 'communicates' 'with' '{' communicatesWith+=[Component] ( "," communicatesWith+=[Component])*'}')?
		(';' 'properties' '{' properties +=Property ( "," properties+=Property)*'}')?
	')'
; 

NumberExpression returns NumberExpression:
	Addition
;

TernaryOp returns TernaryOp:
	'(' 'if' op1=Expression 'then' op2=Expression 'else' op3 = Expression ')'
;

NumberOperation returns OperationNumber:
	operation=NumberOperationStart '(' op1=NumberExpression ',' op2=NumberExpression ')'
//	|
//	'(' op1=NumberExpression operation=NumberOperationMiddle op2=NumberExpression ')'
;

Addition returns OperationNumberNary:
	ops+=Soustraction (operation=NumberOperation1 ops+=Soustraction)*
;


Soustraction returns OperationNumberNary:
	ops+=Multiplication (operation=NumberOperation2  ops+=Multiplication)*
;

Multiplication returns OperationNumberNary:
	ops+=Division (operation=NumberOperation3  ops+=Division)*
;

Division returns OperationNumberNary:
	ops+=Number (operation=NumberOperation4  ops+=Number)*
;


Number returns NumberExpression:
	IntegerValue | FloatValue | 'numerical' Reference | TernaryOp | '('Addition')' | NumberOperation
;


Expression returns Expression:
	NumberExpression  | BooleanExpression | StringExpression | Reference
;

StringExpression returns StringExpression:
	StringValue 
;

BooleanExpression returns BooleanExpression:
	BooleanValue | Comparison
	
;

Comparison returns Comparison:
	'(' 'cmp' op1 = Expression operation=Operation op2 = Expression ')'
;


Channel returns Channel:
	'(' 
		name=ID ';' 
		'connects' '{' connects+=[Component] "," connects+=[Component]  ( "," connects+=[Component])* '}' 
	')';

Constraint returns Constraint:
	PresenceConstraint | OperationConstraint 
;

PresenceConstraint returns PresenceConstraint:
	(optional?='optional')?  'needs' propertyName=ID
; 

OperationConstraint returns OperationConstraint:
	(optional?='optional')?  propertyName=ID operation=Operation value=ValueOrReference
;

ValueOrReference returns ValueOrReference:
	Value | Reference
;

Reference returns Reference:
	SelfReference | DeviceReference
;

DeviceReference returns DeviceReference:
	'ref' reference=STRING
;

SelfReference returns SelfReference:
	'self' reference=STRING
	
;

Value returns Value:
	BooleanValue | IntegerValue | FloatValue | StringValue
;

BooleanValue returns BooleanValue:
	value=BOOL
;

StringValue returns StringValue:
	value=STRING
;

FloatValue returns FloatValue:
	value=FLOAT
;

IntegerValue returns IntegerValue:
	value=SINT
;

terminal BOOL returns ecore::EBoolean:
	'true' | 'false'
;

terminal SINT returns ecore::EInt:
	('-')? INT
;

terminal FLOAT returns ecore::EFloat:
	SINT '.' INT
;

enum Operation returns Operation:
	eq = "=" | ne = "!=" | gt = ">" | ge = ">=" | le = "<=" | lt = "<"
;

enum NumberOperationMiddle returns NumberOperation:
	add = "+" | minus = "-" | mul = "*" | div = "/" 
;

enum NumberOperation1 returns NumberOperation:
	add = "+"
;
enum NumberOperation2 returns NumberOperation:
	minus = "-"
;

enum NumberOperation3 returns NumberOperation:
	mul = "*" 
;
enum NumberOperation4 returns NumberOperation:
	div = "/" 
;

enum NumberOperationStart returns NumberOperationFunction:
	max = "max" | min = "min"
;

PositiveIntegerValue returns IntegerValue:
	value=SINT
;

