/*
 * generated by Xtext 2.32.0
 */
package org.xtext.iec62443.baseModel.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.iec62443.baseModel.mIEC.Model
import org.xtext.iec62443.baseModel.mIEC.*
import org.xtext.iec62443.baseModel.services.MiecGrammarAccess
import org.xtext.iec62443.baseModel.mIEC.ClassicalZone

class MiecFormatter extends AbstractFormatter2 {

	@Inject extension MiecGrammarAccess

	@Inject
	MiecGrammarAccess ga;

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (zone : model.zones) {
			zone.format
		}
		for (conduit : model.conduits) {
			conduit.format
		}
	}

	def dispatch void format(ClassicalZone zone, extension IFormattableDocument document) {
		interior(
			zone.regionFor.keyword(ga.classicalZoneAccess.leftCurlyBracketKeyword_4).append[newLine],
			zone.regionFor.keyword(ga.classicalZoneAccess.rightCurlyBracketKeyword_11).prepend[newLine],
			[indent]
		)
		interior(
			zone.regionFor.keyword(ga.classicalZoneAccess.leftCurlyBracketKeyword_8_2).append[newLine],
			zone.regionFor.keyword(ga.classicalZoneAccess.rightCurlyBracketKeyword_8_5).prepend[newLine],
			[indent]
		)
		interior(
			zone.regionFor.keyword(ga.classicalZoneAccess.leftCurlyBracketKeyword_8_2).append[newLine],
			zone.regionFor.keyword(ga.classicalZoneAccess.rightCurlyBracketKeyword_8_5).prepend[newLine],
			[indent]
		)
		interior(
			zone.regionFor.keyword(ga.classicalZoneAccess.leftCurlyBracketKeyword_9_2).append[newLine],
			zone.regionFor.keyword(ga.classicalZoneAccess.rightCurlyBracketKeyword_9_5).prepend[newLine],
			[indent]
		)
		interior(
			zone.regionFor.keyword(ga.classicalZoneAccess.leftCurlyBracketKeyword_10_2).append[newLine],
			zone.regionFor.keyword(ga.classicalZoneAccess.rightCurlyBracketKeyword_10_5).prepend[newLine],
			[indent]
		)
		for (k : zone.regionFor.keywords(",")) {
			k.append[newLine]
		}
		for (k : zone.regionFor.keywords(";")) {
			k.append[newLine]
		}

		zone.target.format
		zone.achieved.format
		for (component : zone.components) {
			component.format
		}
		for (counterMeasure : zone.countermeasures) {
			counterMeasure.format
		}
		for (zoneChild : zone.subZones) {
			zoneChild.format
		}
	}

	def dispatch void format(Conduit conduit, extension IFormattableDocument document) {
		interior(
			conduit.regionFor.keyword(ga.conduitAccess.leftParenthesisKeyword_6).append[newLine],
			conduit.regionFor.keyword(ga.conduitAccess.rightParenthesisKeyword_9).prepend[newLine],
			[indent]
		)
		interior(
			conduit.regionFor.keyword(ga.conduitAccess.leftCurlyBracketKeyword_4).append[newLine],
			conduit.regionFor.keyword(ga.conduitAccess.rightCurlyBracketKeyword_17).prepend[newLine],
			[indent]
		)
		interior(
			conduit.regionFor.keyword(ga.conduitAccess.leftCurlyBracketKeyword_14_2).append[newLine],
			conduit.regionFor.keyword(ga.conduitAccess.rightCurlyBracketKeyword_14_5).prepend[newLine],
			[indent]
		)
		interior(
			conduit.regionFor.keyword(ga.conduitAccess.leftCurlyBracketKeyword_16_2).append[newLine],
			conduit.regionFor.keyword(ga.conduitAccess.rightCurlyBracketKeyword_16_5).prepend[newLine],
			[indent]
		)
		interior(
			conduit.regionFor.keyword(ga.conduitAccess.leftCurlyBracketKeyword_14_2).append[newLine],
			conduit.regionFor.keyword(ga.conduitAccess.rightCurlyBracketKeyword_14_5).prepend[newLine],
			[indent]
		)
		interior(
			conduit.regionFor.keyword(ga.conduitAccess.leftCurlyBracketKeyword_15_2).append[newLine],
			conduit.regionFor.keyword(ga.conduitAccess.rightCurlyBracketKeyword_15_5).prepend[newLine],
			[indent]
		)
		for (k : conduit.regionFor.keywords(",")) {
			k.append[newLine]
		}
		for (k : conduit.regionFor.keywords(";")) {
			k.append[newLine]
		}
		conduit.target.format
		conduit.achieved.format
		for (component : conduit.components) {
			component.format
		}
		for (counterMeasure : conduit.countermeasures) {
			counterMeasure.format
		}
		for (channel : conduit.channels) {
			channel.format
		}
	}

	def dispatch void format(Channel ch, extension IFormattableDocument document) {
		interior(
			ch.regionFor.keyword(ga.channelAccess.leftParenthesisKeyword_0).append[newLine],
			ch.regionFor.keyword(ga.channelAccess.rightParenthesisKeyword_10).prepend[newLine],
			[indent]
		)
		interior(
			ch.regionFor.keyword(ga.channelAccess.leftCurlyBracketKeyword_4).append[newLine],
			ch.regionFor.keyword(ga.channelAccess.rightCurlyBracketKeyword_9).prepend[newLine],
			[indent]
		)

	}

	def dispatch void format(SecurityLevels sl, extension IFormattableDocument document) {
		// no necessary changes
	}

	def dispatch void format(Component comp, extension IFormattableDocument document) {

		for (k : comp.regionFor.keywords(",")) {
			k.append[newLine]
		}
		for (k : comp.regionFor.keywords(";")) {
			k.append[newLine]
		}

		if (comp.type == Component.APPLICATION) {
			interior(
				comp.regionFor.keyword(ga.applicationAccess.leftParenthesisKeyword_0).append[newLine],
				comp.regionFor.keyword(ga.applicationAccess.rightParenthesisKeyword_15).prepend[newLine],
				[indent]
			)
			interior(
				comp.regionFor.keyword(ga.applicationAccess.leftCurlyBracketKeyword_11_2).append[newLine],
				comp.regionFor.keyword(ga.applicationAccess.rightCurlyBracketKeyword_11_5).prepend[newLine],
				[indent]
			)
			interior(
				comp.regionFor.keyword(ga.applicationAccess.leftCurlyBracketKeyword_11_2).append[newLine],
				comp.regionFor.keyword(ga.applicationAccess.rightCurlyBracketKeyword_11_5).prepend[newLine],
				[indent]
			)
			interior(
				comp.regionFor.keyword(ga.applicationAccess.leftCurlyBracketKeyword_13_3).append[newLine],
				comp.regionFor.keyword(ga.applicationAccess.rightCurlyBracketKeyword_13_6).prepend[newLine],
				[indent]
			)
			interior(
				comp.regionFor.keyword(ga.applicationAccess.leftCurlyBracketKeyword_14_2).append[newLine],
				comp.regionFor.keyword(ga.applicationAccess.rightCurlyBracketKeyword_14_5).prepend[newLine],
				[indent]
			)
		}

		if (comp.type == Component.DEVICE) {
			interior(
				comp.regionFor.keyword(ga.deviceAccess.leftParenthesisKeyword_0).append[newLine],
				comp.regionFor.keyword(ga.deviceAccess.rightParenthesisKeyword_7).prepend[newLine],
				[indent]
			)
			interior(
				comp.regionFor.keyword(ga.deviceAccess.leftCurlyBracketKeyword_6_2).append[newLine],
				comp.regionFor.keyword(ga.deviceAccess.rightCurlyBracketKeyword_6_5).prepend[newLine],
				[indent]
			)
		}

		if (comp.type == Component.SYSTEM) {
			interior(
				comp.regionFor.keyword(ga.systemAccess.leftParenthesisKeyword_0).append[newLine],
				comp.regionFor.keyword(ga.systemAccess.rightParenthesisKeyword_8).prepend[newLine],
				[indent]
			)
			interior(
				comp.regionFor.keyword(ga.systemAccess.leftCurlyBracketKeyword_6_2).append[newLine],
				comp.regionFor.keyword(ga.systemAccess.rightCurlyBracketKeyword_6_5).prepend[newLine],
				[indent]
			)
			interior(
				comp.regionFor.keyword(ga.systemAccess.leftCurlyBracketKeyword_7_2).append[newLine],
				comp.regionFor.keyword(ga.systemAccess.rightCurlyBracketKeyword_7_5).prepend[newLine],
				[indent]
			)
			for (d : (comp as System).devices) {
				d.format
			}
		}

	}

	def dispatch void format(CounterMeasure cm, extension IFormattableDocument document) {
		// no necessary changes
	}

// TODO: implement for Component, counterMeasure, Conduit, Device, System
}
